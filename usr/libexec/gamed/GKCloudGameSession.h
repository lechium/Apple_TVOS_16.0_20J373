//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CKRecord, GKCloudPlayer, NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSString, NSURL;

@interface GKCloudGameSession : NSObject
{
    CKRecord *_record;	// 8 = 0x8
    NSDictionary *_playersByIdentifier;	// 16 = 0x10
    GKCloudPlayer *_owner;	// 24 = 0x18
    NSURL *_url;	// 32 = 0x20
}

+ (void)badgeCountForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x002000000015a65e
+ (void)updateBadgeCountsForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2;	// IMP=0x001000000015a25f
+ (void)updateBadgeCountsForContainerName:(id)arg1;	// IMP=0x001000000015a24b
+ (void)deleteInviteRecordWithRecordID:(id)arg1 fromDatabase:(id)arg2;	// IMP=0x0010000000159eac
+ (void)searchAndSaveIdentityForRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000159ea6
+ (_Bool)shouldRetryForError:(id)arg1 andRetryCount:(int)arg2;	// IMP=0x00100000001599e8
+ (void)saveInviteRecord:(id)arg1 database:(id)arg2 retryCount:(int)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0010000000158cdd
+ (void)getAssociatedAccountsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000158cd7
+ (id)msgServiceQueue;	// IMP=0x0010000000158c80
+ (void)generateAndStoreInviteBulletinForRecord:(id)arg1 database:(id)arg2;	// IMP=0x0010000000157f7c
+ (id)packFakeTurnBasedBulletinWithZoneData:(id)arg1;	// IMP=0x00100000001579f5
+ (id)packFakeRealTimeBulletinWithZoneData:(id)arg1;	// IMP=0x0010000000156e5d
+ (void)reportPlayerStateChangesToClients:(id)arg1 forUpdatedSession:(id)arg2 oldSession:(id)arg3;	// IMP=0x00100000001559e1
+ (void)openStoreForBundleID:(id)arg1;	// IMP=0x00100000001542cd
+ (void)launchOrOpenAppStoreForBundleID:(id)arg1;	// IMP=0x001000000015427f
+ (void)acceptShareMetadata:(id)arg1 retryCount:(int)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000153a8a
+ (void)showAcceptAlertWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000153905
+ (void)handleLegacyShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000152e19
+ (void)handleSessionShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000015256e
+ (void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000151d82
+ (void)acceptShareURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000151a08
+ (void)saveInformationForPrimaryUserForSessionWithShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00100000001510f5
+ (void)fetchShareMetadataForURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000150c92
+ (void)fetchShareRecordsWithRecordIDs:(id)arg1 inDatabase:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000150b69
+ (id)cloudKitOperationConfigurationForSocialGamingSessionsContainer;	// IMP=0x001000000014f9ba
+ (id)cloudKitOperationConfigurationForContainer:(id)arg1;	// IMP=0x001000000014f930
+ (void)subscribeToAllDBwithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000014f42f
+ (void)getZoneNamesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000014ee52
+ (void)createZoneWithName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000014ec62
+ (void)bundleIDsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000014da62
+ (void)removeSessionWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000014d229
+ (void)createSessionWithContainerName:(id)arg1 title:(id)arg2 maxConnectedPlayers:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x001000000014c5d1
+ (_Bool)isCloudDriveEnabledForBundleID:(id)arg1;	// IMP=0x001000000014c2ab
+ (id)databaseForZoneID:(id)arg1;	// IMP=0x001000000014c25f
+ (id)databaseForSession:(id)arg1;	// IMP=0x001000000014c210
+ (id)sharedDatabase;	// IMP=0x001000000014c1b2
+ (id)privateDatabase;	// IMP=0x001000000014c154
+ (_Bool)isOwnZoneID:(id)arg1;	// IMP=0x001000000014c035
+ (_Bool)isOwnRecordID:(id)arg1;	// IMP=0x001000000014bfdf
+ (id)recordIDForSessionIdentifier:(id)arg1;	// IMP=0x001000000014bd90
+ (id)sessionIdentifierForRecordID:(id)arg1;	// IMP=0x001000000014bbad
+ (id)allowedCharacterSet;	// IMP=0x001000000014baec
+ (void)getFriendPlayersWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000014b471
+ (void)updateFriendRecordIfNeeded;	// IMP=0x001000000014ac34
+ (void)updateFriendsWithRecord:(id)arg1;	// IMP=0x001000000014a556
+ (void)updateCacheForFriendZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000149ff4
+ (void)updatePlayersForSessions:(id)arg1 sharesByRecordID:(id)arg2 inDatabase:(id)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x0010000000148d4a
+ (void)primaryPlayerWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000148c89
+ (id)playerIdentifierForUserRecordName:(id)arg1;	// IMP=0x0010000000148bbc
+ (id)localPlayerAlias;	// IMP=0x0010000000148953
+ (void)determinePlayerChangesIn:(id)arg1 newSession:(id)arg2 notifyClients:(id)arg3;	// IMP=0x001000000014814c
+ (void)reportChangesForSessions:(id)arg1 shareChangedSessions:(id)arg2 removedSessions:(id)arg3 zoneID:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x00100000001471c4
+ (id)allChangedSessionsFromRecordChangedSessions:(id)arg1 shareChangedSessions:(id)arg2;	// IMP=0x0010000000146d18
+ (void)updateCacheForDatabase:(id)arg1 zoneIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00100000001454ba
+ (void)updateCacheForDatabaseScope:(long long)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000143e7a
+ (void)updateCacheForZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000143aa7
+ (void)updateSessionCacheDatabasesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000001436e1
+ (void)updateSessionCacheWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000143297
+ (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000143225
+ (void)fetchUserRecordIDWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000001431a8
+ (id)friendEmailsByID;	// IMP=0x0010000000143158
+ (void)sessionForShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00100000001430bc
+ (void)sessionsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000142d06
+ (void)sessionForIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00100000001428e2
+ (id)cacheQueue;	// IMP=0x001000000014288b
+ (id)sessionCache;	// IMP=0x0010000000142836
+ (id)AES128Operation:(unsigned int)arg1 key:(id)arg2 data:(id)arg3;	// IMP=0x00100000001426e3
+ (id)AES128DecryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x00100000001426c9
+ (id)AES128EncryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x00100000001426b2
+ (id)playerIdentifierForObfuscatedIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x00100000001425b1
+ (id)obfuscatedIdentifierForPlayerIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x00100000001424c6
+ (id)mutablePlistFromPlayerStatesData:(id)arg1 error:(id *)arg2;	// IMP=0x00100000001416c1
+ (_Bool)supportsSecureCoding;	// IMP=0x0010000000140b53
- (void).cxx_destruct;	// IMP=0x002000000015b870
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) GKCloudPlayer *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) NSDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
@property(retain, nonatomic) CKRecord *record; // @synthesize record=_record;
- (void)setBadged:(_Bool)arg1 forPlayerIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x001000000015ae9b
- (void)saveConnectionState:(long long)arg1 forPlayerWithID:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000156567
- (void)tempEmailFixForPlayerID:(id)arg1;	// IMP=0x00100000001563e0
@property(readonly, nonatomic) NSArray *connectedPlayerIDs;
- (void)removePlayers:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000154d6b
- (void)deleteShareWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000001549be
- (void)fetchShareRecordWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000150973
- (void)saveShare:(id)arg1 isNewShare:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00100000001504e2
- (void)setupShareWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000015027b
- (void)getShareURLWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000014fa97
- (void)saveWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000014e95e
- (void)saveData:(id)arg1 changeTag:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x001000000014e0ae
@property(readonly, nonatomic) NSString *containerName;
- (id)playersForGKGameSession;	// IMP=0x0010000000149c6a
- (id)players;	// IMP=0x0010000000149c1a
- (void)setPlayers:(id)arg1;	// IMP=0x0010000000149a11
- (void)updatePlayersWithIdentities:(id)arg1;	// IMP=0x0010000000149708
- (id)createGKGameSession;	// IMP=0x0010000000141de7
@property(retain, nonatomic) NSMutableDictionary *nicknamesByIdentifier; // @dynamic nicknamesByIdentifier;
@property(retain, nonatomic) NSMutableDictionary *emailsByCKID;
@property(readonly, nonatomic) NSDictionary *playersByEmail;
- (id)playerStates;	// IMP=0x0010000000141711
- (void)setPlayerStates:(id)arg1;	// IMP=0x0010000000141648
@property(readonly, nonatomic) NSString *serverChangeTag;
// Error: Property attributes should begin with the type ('T') attribute, property name: lastModifiedPlayer
// Property attributes: (null)

@property(readonly, nonatomic) NSDate *lastModifiedDate;
@property(retain, nonatomic) NSData *data;
@property(nonatomic) long long maxConnectedPlayers;
@property(retain, nonatomic) NSString *title;
@property(readonly, nonatomic) NSString *identifier;
- (_Bool)isOwnedByUser;	// IMP=0x0010000000141029
- (id)description;	// IMP=0x0010000000140ef4
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0010000000140e11
- (id)initWithCoder:(id)arg1;	// IMP=0x0010000000140b5b
- (id)initWithRecord:(id)arg1;	// IMP=0x0010000000140aeb
- (id)initWithContainerName:(id)arg1;	// IMP=0x0010000000140a37

@end

