//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CLSubmersionDataCollector, CLTimer;

@interface CLContextManagerWaterSubmersionBase
{
    struct unique_ptr<CLPowerAssertion, std::default_delete<CLPowerAssertion>> _powerAssertionSubmersion;	// 40 = 0x28
    CLTimer *_submersionPowerAssertionTimer;	// 48 = 0x30
    struct unique_ptr<CLPowerAssertion, std::default_delete<CLPowerAssertion>> _powerAssertionHK;	// 56 = 0x38
    _Bool _updatingHK;	// 64 = 0x40
    _Bool _updatingSurfacePressure;	// 65 = 0x41
    long long _submersionState;	// 72 = 0x48
    long long _externalSubmersionState;	// 80 = 0x50
    CLSubmersionDataCollector *_hkCollector;	// 88 = 0x58
    double _deepThreshold;	// 96 = 0x60
    double _nearDepthLimitThreshold;	// 104 = 0x68
    double _pastMaxDepthThreshold;	// 112 = 0x70
    double _sensorErrorThreshold;	// 120 = 0x78
    double _lastHKUpdate;	// 128 = 0x80
    double _lastDefaultLevelLogTimestamp;	// 136 = 0x88
    shared_ptr_85043445 _aopSubmersionState;	// 144 = 0x90
}

- (id).cxx_construct;	// IMP=0x0020000000462243
- (void).cxx_destruct;	// IMP=0x00100000004621e2
@property double lastDefaultLevelLogTimestamp; // @synthesize lastDefaultLevelLogTimestamp=_lastDefaultLevelLogTimestamp;
@property double lastHKUpdate; // @synthesize lastHKUpdate=_lastHKUpdate;
@property double sensorErrorThreshold; // @synthesize sensorErrorThreshold=_sensorErrorThreshold;
@property double pastMaxDepthThreshold; // @synthesize pastMaxDepthThreshold=_pastMaxDepthThreshold;
@property double nearDepthLimitThreshold; // @synthesize nearDepthLimitThreshold=_nearDepthLimitThreshold;
@property double deepThreshold; // @synthesize deepThreshold=_deepThreshold;
@property CLSubmersionDataCollector *hkCollector; // @synthesize hkCollector=_hkCollector;
@property _Bool updatingSurfacePressure; // @synthesize updatingSurfacePressure=_updatingSurfacePressure;
@property shared_ptr_85043445 aopSubmersionState; // @synthesize aopSubmersionState=_aopSubmersionState;
@property long long externalSubmersionState; // @synthesize externalSubmersionState=_externalSubmersionState;
@property _Bool updatingHK; // @synthesize updatingHK=_updatingHK;
@property long long submersionState; // @synthesize submersionState=_submersionState;
- (void)notificationAcknowledged:(unsigned long long)arg1;	// IMP=0x0010000000461e91
- (void)startSubmersionPowerAssertion;	// IMP=0x0010000000461d20
- (void)retrieveCachedSubmersionState;	// IMP=0x0010000000461a25
- (void)saveCachedSubmersionState:(shared_ptr_85043445)arg1;	// IMP=0x00100000004618b5
- (void)onNotSubmerged;	// IMP=0x0010000000461869
- (void)onDeepSubmersion:(double)arg1 withStateChanged:(_Bool)arg2;	// IMP=0x0010000000461806
- (void)onShallowSubmersion:(_Bool)arg1;	// IMP=0x00100000004617b5
- (void)updateSubmersionStateFromMeasurement:(id)arg1;	// IMP=0x000000000046146d
- (void)updateSubmersionStateFromAOPState:(shared_ptr_85043445)arg1;	// IMP=0x0010000000461127
- (void)updateClientsSubmersionState:(id)arg1;	// IMP=0x0010000000460f8c
- (void)updateClientsSubmersionMeasurement:(id)arg1;	// IMP=0x00100000004608c3
- (void)clientConnected:(id)arg1 withNotification:(unsigned long long)arg2;	// IMP=0x00100000004606cb
- (void)notifyHKUpdates:(id)arg1;	// IMP=0x001000000046063c
- (void)stopHKCollector;	// IMP=0x0010000000460518
- (void)startHKCollector:(double)arg1;	// IMP=0x001000000046036e
- (void)dealloc;	// IMP=0x0010000000460284
- (id)initWithUniverse:(id)arg1 delegate:(id)arg2 withBuffer:(void *)arg3 withSourceAggregator:(id)arg4;	// IMP=0x001000000045fe60

@end

