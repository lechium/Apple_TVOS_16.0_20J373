//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <WebKitLegacy/DOMNode.h>

@class NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession, UIColor, UIImage, UIInputContextHistory, UIResponder, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, _UISupplementalLexicon;
@protocol UITextInput, UITextInputDelegate, UITextInputPrivate, UITextInputSuggestionDelegate, UITextInputTokenizer;

@interface DOMNode (UIWebFormPeripheral)
- (id)createPeripheral;	// IMP=0x0020000000670080
- (id)itemTitle;	// IMP=0x00200000006765bb
- (void)populateCell:(id)arg1;	// IMP=0x00200000006765b5
- (id)createPickerCell;	// IMP=0x00200000006765ad
- (id)createSelectedItem;	// IMP=0x00200000006765a5
- (id)_responderWindow;	// IMP=0x0020000000b57e47
- (id)inputAssistantItem;	// IMP=0x0020000000b57df7
- (id)_textInteraction;	// IMP=0x0020000000b57da7
- (id)_selectableText;	// IMP=0x0020000000b57d9e
- (_Bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(_Bool)arg3;	// IMP=0x0020000000b57c80
- (void)_unmarkText;	// IMP=0x0020000000b57c14
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000b578df
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000b57859
- (_Bool)_hasMarkedText;	// IMP=0x0020000000b577d7
- (_Bool)_usesAsynchronousProtocol;	// IMP=0x0020000000b5778c
- (void)_setGestureRecognizers;	// IMP=0x0020000000b57422
- (long long)_selectionAffinity;	// IMP=0x0020000000b5727f
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000b571ee
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000b57160
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b56f8f
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b56dbe
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b56aa4
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b5678a
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b565a8
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b56445
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b561e5
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b55f79
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b55c55
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b55925
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b555e9
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b55012
- (id)_setHistory:(id)arg1 withExtending:(_Bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000b54d5c
- (id)_setSelectionRangeWithHistory:(id)arg1;	// IMP=0x0020000000b54a08
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000b54990
- (id)_fontForCaretSelection;	// IMP=0x0020000000b54842
- (id)_textColorForCaretSelection;	// IMP=0x0020000000b546f4
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange)arg1;	// IMP=0x0020000000b544ee
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;	// IMP=0x0020000000b5440c
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;	// IMP=0x0020000000b53bf4
- (id)_findDocumentBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000b53b03
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000b538d0
- (id)_findBoundaryPositionClosestToPosition:(id)arg1 withGranularity:(long long)arg2;	// IMP=0x0020000000b53858
- (_Bool)_range:(id)arg1 isEqualToRange:(id)arg2;	// IMP=0x0020000000b536f4
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;	// IMP=0x0020000000b5353d
- (_Bool)_range:(id)arg1 intersectsRange:(id)arg2;	// IMP=0x0020000000b534b8
- (_Bool)_range:(id)arg1 containsRange:(id)arg2;	// IMP=0x0020000000b53418
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;	// IMP=0x0020000000b531ac
- (id)_fullRange;	// IMP=0x0020000000b53105
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;	// IMP=0x0020000000b530eb
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;	// IMP=0x0020000000b530d1
- (id)_rangeOfLineEnclosingPosition:(id)arg1;	// IMP=0x0020000000b530b7
- (id)_rangeOfEnclosingWord:(id)arg1;	// IMP=0x0020000000b5309d
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;	// IMP=0x0020000000b52f95
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;	// IMP=0x0020000000b52b8c
- (id)_normalizedStringForRangeComparison:(id)arg1;	// IMP=0x0020000000b52aed
- (void)_scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x0020000000b529e5
- (void)_replaceDocumentWithText:(id)arg1;	// IMP=0x0020000000b5292b
- (void)_replaceCurrentWordWithText:(id)arg1;	// IMP=0x0020000000b5284c
- (void)_transpose;	// IMP=0x0020000000b524f0
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000b522d6
- (void)_deleteBackwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000b52299
- (void)_deleteTextRange:(id)arg1;	// IMP=0x0020000000b5215a
- (void)_deleteToEndOfParagraph;	// IMP=0x0020000000b51f38
- (void)_deleteToEndOfLine;	// IMP=0x0020000000b51d16
- (void)_deleteToStartOfLine;	// IMP=0x0020000000b51af6
- (void)_deleteForwardByWord;	// IMP=0x0020000000b517cb
- (void)_deleteByWord;	// IMP=0x0020000000b51635
- (void)_setCaretSelectionAtEndOfSelection;	// IMP=0x0020000000b51551
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;	// IMP=0x0020000000b5127c
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000000b51090
- (long long)_opposingDirectionFromDirection:(long long)arg1;	// IMP=0x0020000000b51076
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0020000000b50fc4
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;	// IMP=0x0020000000b50ea2
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;	// IMP=0x0020000000b50e8b
- (void)_expandSelectionToBackwardDeletionClusterWithReinsertionOut:(id *)arg1;	// IMP=0x0020000000b50aa9
- (void)_moveCurrentSelection:(int)arg1;	// IMP=0x0020000000b508f9
- (void)_extendCurrentSelection:(int)arg1;	// IMP=0x0020000000b50768
- (_Bool)_hasMarkedTextOrRangedSelection;	// IMP=0x0020000000b50699
- (_Bool)_isEmptySelection;	// IMP=0x0020000000b505dc
- (struct CGRect)_selectionClipRect;	// IMP=0x0020000000b505be
- (_Bool)_selectionAtDocumentEnd;	// IMP=0x0020000000b504fc
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0020000000b5043a
- (_Bool)_selectionAtWordStart;	// IMP=0x0020000000b502f0
- (void)_setSelectionToPosition:(id)arg1;	// IMP=0x0020000000b5024f
- (id)_fullText;	// IMP=0x0020000000b50181
- (id)_wordContainingCaretSelection;	// IMP=0x0020000000b5003f
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;	// IMP=0x0020000000b4fe8e
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;	// IMP=0x0020000000b4fb9d
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000000b4fad9
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x0020000000b4fac2
- (unsigned int)_characterAfterCaretSelection;	// IMP=0x0020000000b4faae
- (id)_textRangeFromNSRange:(struct _NSRange)arg1;	// IMP=0x0020000000b4f990
- (struct _NSRange)_nsrangeForTextRange:(id)arg1;	// IMP=0x0020000000b4f895
- (int)_indexForTextPosition:(id)arg1;	// IMP=0x0020000000b4f7fd
- (void)_selectAll;	// IMP=0x0020000000b4f790
- (struct _NSRange)_selectedRangeWithinMarkedText;	// IMP=0x0020000000b4f5e1
- (struct _NSRange)_selectedNSRange;	// IMP=0x0020000000b4f53f
@property(nonatomic) long long _textInputSource;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
- (id)_keyInput;	// IMP=0x0020000000b4f32e
@property(readonly, nonatomic, getter=_proxyTextInput) UIResponder<UITextInput> *__content;
@property(readonly, nonatomic) UIView *textInputView;
- (id)urlScheme;	// IMP=0x00200000011d943b
- (id)tagName;	// IMP=0x00200000011d93ed
- (id)_realNode;	// IMP=0x00200000011db393
- (id)_textFormElement;	// IMP=0x00200000011db50c
- (id)_previousAssistedNode;	// IMP=0x00200000011db4af
- (id)_nextAssistedNode;	// IMP=0x00200000011db452
- (void)_accessoryClear;	// IMP=0x00200000011db44c
- (_Bool)_supportsAccessoryClear;	// IMP=0x00200000011db444
- (_Bool)_supportsAutoFill;	// IMP=0x00200000011db43c
- (_Bool)_requiresInputView;	// IMP=0x00200000011db42a
- (_Bool)_requiresAccessoryView;	// IMP=0x00200000011db418
- (void)_stopAssistingDocumentView:(id)arg1;	// IMP=0x00200000011db3e1
- (void)_startAssistingDocumentView:(id)arg1;	// IMP=0x00200000011db3aa
- (_Bool)nodeCanBecomeFirstResponder;	// IMP=0x00200000011e94ce
- (_Bool)isLikelyToBeginPageLoad;	// IMP=0x00200000011e94c6
- (id)absoluteQuadsAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000011e94b4
- (_Bool)touchCalloutEnabled;	// IMP=0x00200000011e94ac
- (id)tapHighlightColor;	// IMP=0x00200000011e947d
- (_Bool)alwaysAttemptToShowTapHighlight;	// IMP=0x00200000011e946b
- (_Bool)showsTapHighlight;	// IMP=0x00200000011e9463
@property(nonatomic) long long keyboardType;
- (_Bool)isSecure;	// IMP=0x00200000011f921b
- (_Bool)isTextControl;	// IMP=0x00200000011f9213
- (struct CGRect)convertRect:(struct CGRect)arg1 toView:(id)arg2;	// IMP=0x00200000011f90c9
- (id)textDocument;	// IMP=0x00200000011fc0d5
@property(nonatomic) long long selectionAffinity;
- (_Bool)editing;	// IMP=0x00200000011fc078
- (_Bool)editable;	// IMP=0x00200000011fc070
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x00200000011fbdf9
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x00200000011fbdf3
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00200000011fbdeb
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00200000011fbd69
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x00200000011fbcf2
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000011fbc5d
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x00200000011fbbda
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x00200000011fbb61
@property(copy, nonatomic) NSDictionary *markedTextStyle;
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x00200000011fb9dc
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00200000011fb867
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00200000011fb81d
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00200000011fb7ae
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00200000011fb764
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x00200000011fb6fb
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x00200000011fb67e
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00200000011fb632
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00200000011fb5e7
@property(readonly, nonatomic) _Bool hasText;
- (void)unmarkText;	// IMP=0x00200000011fb562
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (void)moveDown;	// IMP=0x00200000011fb482
- (void)moveUp;	// IMP=0x00200000011fb415
- (void)moveLeft;	// IMP=0x00200000011fb3a8
- (void)moveRight;	// IMP=0x00200000011fb33b
- (struct CGRect)_lastRectForRange:(id)arg1;	// IMP=0x00200000011fb215
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x00200000011fb0fa
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x00200000011fb0e5
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x00200000011fb0cd
- (void)replaceRange:(id)arg1 withText:(id)arg2 closeTyping:(_Bool)arg3;	// IMP=0x00200000011fafd5
- (id)rangeOfEnclosingWord:(id)arg1;	// IMP=0x00200000011faf81
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00200000011faee5
- (id)textInRange:(id)arg1;	// IMP=0x00200000011fae6c
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
@property(copy) UITextRange *selectedTextRange;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x00200000011fac75
@property(readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
- (void)setBecomesEditableWithGestures:(_Bool)arg1;	// IMP=0x00200000011fab9f
- (_Bool)becomesEditableWithGestures;	// IMP=0x00200000011fab97
- (_Bool)isEditing;	// IMP=0x00200000011fab8f
- (_Bool)isEditable;	// IMP=0x00200000011fab87
- (id)content;	// IMP=0x00200000011fab7f
- (void)updateSelection;	// IMP=0x00200000011fab79
- (id)selectionView;	// IMP=0x00200000011fab4e
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (_Bool)isAutoFillMode;	// IMP=0x00200000011faab0
- (void)acceptedAutoFillWord:(id)arg1;	// IMP=0x00200000011faa5c
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1;	// IMP=0x00200000011faa42
- (void)updateAutoscroll:(id)arg1;	// IMP=0x00200000011fa665
- (id)automaticallySelectedOverlay;	// IMP=0x00200000011fa622
- (void)setInitialSelectionBehavior:(int)arg1;	// IMP=0x00200000011fa61c
- (int)initialSelectionBehavior;	// IMP=0x00200000011fa614
@property(nonatomic) long long returnKeyType;
@property(nonatomic) int textLoupeVisibility;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(nonatomic) id textSuggestionDelegate;
- (_Bool)isShowingPlaceholder;	// IMP=0x00200000011fa5d4
- (struct CGRect)convertCaretRect:(struct CGRect)arg1;	// IMP=0x00200000011fa551
- (struct CGRect)caretRect;	// IMP=0x00200000011fa448
- (void)setSelectionWithPoint:(struct CGPoint)arg1;	// IMP=0x00200000011fa42e
- (void)setSelectionWithPoint:(struct CGPoint)arg1 inset:(double)arg2;	// IMP=0x00200000011fa3ab
- (id)text;	// IMP=0x00200000011fa355
- (void)setText:(id)arg1;	// IMP=0x00200000011fa2be
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1 withInset:(double)arg2;	// IMP=0x00200000011fa0d7
- (int)selectionState;	// IMP=0x00200000011fa094
- (void)selectAll;	// IMP=0x00200000011fa037
- (_Bool)selectionAtWordStart;	// IMP=0x00200000011f9ff4
- (_Bool)selectionAtDocumentStart;	// IMP=0x00200000011f9fb1
- (_Bool)hasSelection;	// IMP=0x00200000011f9f6e
- (void)extendCurrentSelection:(int)arg1;	// IMP=0x00200000011f9ee7
- (id)rangeByExtendingCurrentSelection:(int)arg1;	// IMP=0x00200000011f9e95
- (id)rangeByMovingCurrentSelection:(int)arg1;	// IMP=0x00200000011f9e43
- (struct _NSRange)selectionRange;	// IMP=0x00200000011f9e00
- (int)wordOffsetInRange:(id)arg1;	// IMP=0x00200000011f9dae
- (id)textColorForCaretSelection;	// IMP=0x00200000011f9d95
- (id)fontForCaretSelection;	// IMP=0x00200000011f9c89
- (unsigned short)characterAfterCaretSelection;	// IMP=0x00200000011f9c46
- (void)replaceCurrentWordWithText:(id)arg1;	// IMP=0x00200000011f9b6f
- (void)clearMarkedText;	// IMP=0x00200000011f9b4e
- (id)rectsForNSRange:(struct _NSRange)arg1;	// IMP=0x00200000011f9ad2
- (void)confirmMarkedText:(id)arg1;	// IMP=0x00200000011f99e7
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x00200000011f991d
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;	// IMP=0x00200000011f98cb
- (void)removeTextPlaceholder:(id)arg1;	// IMP=0x00200000011f989a
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1;	// IMP=0x00200000011f9858
- (struct CGRect)frameForDictationResultPlaceholder:(id)arg1;	// IMP=0x00200000011f97f0
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(_Bool)arg2;	// IMP=0x00200000011f97b0
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
- (id)metadataDictionariesForDictationResults;	// IMP=0x00200000011f975a
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;	// IMP=0x00200000011f971a
- (void)endFloatingCursor;	// IMP=0x00200000011f96ef
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1 animated:(_Bool)arg2;	// IMP=0x00200000011f96a4
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000011f9662
- (void)beginFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000011f9620
- (id)uiWebDocumentView;	// IMP=0x00200000011f95dd
- (void)insertText:(id)arg1;	// IMP=0x00200000011f955c
- (void)deleteBackward;	// IMP=0x00200000011f94de
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
- (void)endSelectionChange;	// IMP=0x00200000011f949f
- (void)beginSelectionChange;	// IMP=0x00200000011f946e
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x00200000011f941c
- (_Bool)requiresKeyEvents;	// IMP=0x00200000011f9414
- (id)delegate;	// IMP=0x00200000011f940c
- (void)setSecure:(_Bool)arg1;	// IMP=0x00200000011f9406
- (id)textInputTraits;	// IMP=0x00200000011f92ba
- (void)setupPlaceholderTextIfNeeded;	// IMP=0x00200000011f92b4
@property(nonatomic) _Bool isSingleLineDocument;
- (_Bool)hasContent;	// IMP=0x00200000011f925c
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x00200000011f922b

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool forceSpellingDictation;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(retain, nonatomic) UIColor *insertionPointColor;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) long long selectionGranularity;
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;
@end

