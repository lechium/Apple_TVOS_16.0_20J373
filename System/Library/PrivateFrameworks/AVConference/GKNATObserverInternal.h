//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import "GKNATObserver.h"

@class GKNATObserver_SCContext, NSMutableDictionary, NSObject, NSRecursiveLock;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore;

__attribute__((visibility("hidden")))
@interface GKNATObserverInternal : GKNATObserver
{
    id _delegate;	// 8 = 0x8
    struct __SCDynamicStore *_dynamicStore;	// 16 = 0x10
    NSRecursiveLock *_xNATCheck;	// 24 = 0x18
    int _lastReportedNATType;	// 32 = 0x20
    int _lastReportedCarrierNATType;	// 36 = 0x24
    int _lastReportedNonCarrierNATType;	// 40 = 0x28
    NSMutableDictionary *_interfaceInfoDictionary;	// 48 = 0x30
    _Bool _nonCarrierInterfacesOnly;	// 56 = 0x38
    _Bool _checkTCPAndSSL;	// 57 = 0x39
    _Bool _favorNonCarrier;	// 58 = 0x3a
    _Bool _newCarrierType;	// 59 = 0x3b
    _Bool _addInRangeFlag;	// 60 = 0x3c
    _Bool _addCarrierFlag;	// 61 = 0x3d
    _Bool _ignoreNatTypeCache;	// 62 = 0x3e
    _Bool _ignoreCarrierBundle;	// 63 = 0x3f
    int _NATCheckRetryCount;	// 64 = 0x40
    double _NATCheckRetryDelay;	// 72 = 0x48
    NSMutableDictionary *_currentNetworkNames;	// 80 = 0x50
    NSObject<OS_dispatch_queue> *_natCheckQueue;	// 88 = 0x58
    NSObject<OS_dispatch_queue> *_reportNATQueue;	// 96 = 0x60
    NSObject<OS_dispatch_group> *_natCheckGroup;	// 104 = 0x68
    NSObject<OS_dispatch_semaphore> *_natCheckNetNameSema;	// 112 = 0x70
    _Bool _fNATCheckQueued;	// 120 = 0x78
    _Bool _fNATCheckInProgress;	// 121 = 0x79
    GKNATObserver_SCContext *_sccontext;	// 128 = 0x80
    _Bool _hasNATCheckStarted;	// 136 = 0x88
    _Bool _hasNATCheckEnded;	// 137 = 0x89
}

- (void)registerForNetworkChanges;	// IMP=0x00000000000410e1
- (id)nameForNetworkWithIPPort:(struct tagIPPORT *)arg1 interfaceName:(id)arg2;	// IMP=0x0000000000040d94
- (void)tryNATCheckWithDelay:(double)arg1;	// IMP=0x000000000003f522
- (void)clearRetries;	// IMP=0x000000000003f3bc
- (void)HTTPSCheckWithIPPort:(struct tagIPPORT *)arg1 ipv6Prefix:(const CDStruct_c3d3b44c *)arg2 useCache:(_Bool)arg3;	// IMP=0x000000000003f1f3
- (void)HTTPCheckWithIPPort:(struct tagIPPORT *)arg1 ipv6Prefix:(const CDStruct_c3d3b44c *)arg2 useCache:(_Bool)arg3;	// IMP=0x000000000003f02d
- (void)NATCheckWithIPPort:(struct tagIPPORT *)arg1 ipv6Prefix:(const CDStruct_c3d3b44c *)arg2 useCache:(_Bool)arg3;	// IMP=0x000000000003e69f
- (void)cacheNATFlags:(id)arg1 forNetwork:(id)arg2;	// IMP=0x000000000003e146
- (id)lookupCachedNATFlagsForNetwork:(id)arg1;	// IMP=0x000000000003e07d
- (void)updateNatTypeCache:(id)arg1;	// IMP=0x000000000003e06b
- (id)copyNatTypeCache;	// IMP=0x000000000003e059
- (void)updateNatTypeCache_OSXGamedScheme:(id)arg1;	// IMP=0x000000000003e02c
- (id)copyNatTypeCache_OSXGamedScheme;	// IMP=0x000000000003e002
- (void)updateNatTypeCache_CachePlistScheme:(id)arg1;	// IMP=0x000000000003df4c
- (id)copyNatTypeCachePlistScheme;	// IMP=0x000000000003de38
- (_Bool)ensureNatCachePathExists;	// IMP=0x000000000003dd39
- (int)callHTTPTestFromIPPort:(struct tagIPPORT *)arg1 ipv6Prefix:(const CDStruct_c3d3b44c *)arg2 ToServer:(id)arg3 isSSL:(_Bool)arg4;	// IMP=0x000000000003cdc4
- (struct tagCommNATInfo *)callCommNATTestFromIPPort:(struct tagIPPORT *)arg1 ipv6Prefix:(const CDStruct_c3d3b44c *)arg2;	// IMP=0x000000000003c7f0
- (id)delegate;	// IMP=0x000000000003c7df
- (void)setDelegate:(id)arg1;	// IMP=0x000000000003c70a
- (void)reportNATType;	// IMP=0x000000000003be32
- (void)shouldTryNATCheck;	// IMP=0x000000000003bdb4
- (int)currentNATType;	// IMP=0x000000000003bc51
- (void)calculateSummmaryNATType:(int *)arg1 andCarrierNATType:(int *)arg2 andNonCarrierNATType:(int *)arg3 copyInterfaceInfoDictionary:(id *)arg4;	// IMP=0x000000000003b92c
- (unsigned int)setSSLFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3;	// IMP=0x000000000003b903
- (unsigned int)setTCPFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3;	// IMP=0x000000000003b8da
- (unsigned int)setCommNATFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3;	// IMP=0x000000000003b8b1
- (unsigned int)setFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3 isCachedKey:(id)arg4 mask:(unsigned int)arg5;	// IMP=0x000000000003b665
- (int)natTypeForCommNATFlags:(unsigned int)arg1 isCarrier:(_Bool)arg2;	// IMP=0x000000000003b597
- (void)dealloc;	// IMP=0x000000000003b3ee
- (oneway void)release;	// IMP=0x000000000003b368
- (id)initWithOptions:(id)arg1;	// IMP=0x000000000003ae6b
- (id)init;	// IMP=0x000000000003ae57

@end

