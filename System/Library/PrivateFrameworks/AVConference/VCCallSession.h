//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVCRateController, GKRingBuffer, NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSNumber, NSString, TimingCollection, VCAudioPayload, VCAudioTransmitter, VCBitrateArbiter, VCCallInfo, VCCallLinkCongestionDetector, VCCapabilities, VCCaptionsReceiver, VCConnectionManager, VCControlChannel, VCControlChannelMultiWay, VCDisplayLink, VCImageAttributeRules, VCMediaNegotiator, VCRateControlMediaController, VCRedundancyControllerVideo, VCSecureDataChannel, VCSessionMessaging, VCSwitchManager, VCTransportSession, VCVideoRule, VCWCMClient, VideoAttributes, WRMClient;
@protocol OS_dispatch_queue, OS_dispatch_source, VCCallSessionDelegate, VCConnectionProtocol, VideoConferenceChannelQualityDelegate;

__attribute__((visibility("hidden")))
@interface VCCallSession : NSObject
{
    NSObject<VCCallSessionDelegate> *delegate;	// 8 = 0x8
    VCCallInfo *localCallInfo;	// 16 = 0x10
    VCCallInfo *remoteCallInfo;	// 24 = 0x18
    long long packetMultiplexMode;	// 32 = 0x20
    struct tagHANDLE *rtpHandle;	// 40 = 0x28
    struct tagHANDLE *rtpVideo;	// 48 = 0x30
    void *videoMediaControlInfoGenerator;	// 56 = 0x38
    void *audioMediaControlInfoGenerator;	// 64 = 0x40
    VCConnectionManager *connectionManager;	// 72 = 0x48
    long long connectionChangeState;	// 80 = 0x50
    id <VCConnectionProtocol> toBeChangedPrimaryConnection;	// 88 = 0x58
    VCMediaNegotiator *_mediaNegotiator;	// 96 = 0x60
    VCSwitchManager *_switchManager;	// 104 = 0x68
    NSObject<OS_dispatch_queue> *connectionChangeQueue;	// 112 = 0x70
    long long state;	// 120 = 0x78
    long long _sipState;	// 128 = 0x80
    NSMutableArray *negotiatedAudioPayloads;	// 136 = 0x88
    VCAudioPayload *currentAudioPayload;	// 144 = 0x90
    VCAudioPayload *currentDTXPayload;	// 152 = 0x98
    int _currentRedPayloadType;	// 160 = 0xa0
    VCVideoRule *_currentEncodeRule;	// 168 = 0xa8
    _Bool _isRedEnabled;	// 176 = 0xb0
    long long videoPayload;	// 184 = 0xb8
    long long screenPayload;	// 192 = 0xc0
    long long sampleRate;	// 200 = 0xc8
    struct tagHANDLE *hSIP;	// 208 = 0xd0
    _Bool isAudioRunning;	// 216 = 0xd8
    _Bool isWaitingForICEResult;	// 217 = 0xd9
    _Bool didSend200OK;	// 218 = 0xda
    struct _opaque_pthread_mutex_t mutex;	// 224 = 0xe0
    _Bool receivedSIPInvite;	// 288 = 0x120
    VCImageAttributeRules *imageAttributeRules;	// 296 = 0x128
    int iRemoteRTPPort;	// 304 = 0x130
    int iRemoteRTCPPort;	// 308 = 0x134
    VCCapabilities *caps;	// 312 = 0x138
    int _deviceRole;	// 320 = 0x140
    struct tagHANDLE *hMediaQueue;	// 328 = 0x148
    struct tagHANDLE *hAFRC;	// 336 = 0x150
    AVCRateController *_rateController;	// 344 = 0x158
    VCRateControlMediaController *_mediaController;	// 352 = 0x160
    GKRingBuffer *ringBuf;	// 360 = 0x168
    unsigned int lastReceived;	// 368 = 0x170
    int preferredAudioCodec;	// 372 = 0x174
    _Bool useSBR;	// 376 = 0x178
    _Bool useControlByte;	// 377 = 0x179
    _Bool useUEP;	// 378 = 0x17a
    NSDictionary *_allPayloadsLocalFeaturesString;	// 384 = 0x180
    NSMutableDictionary *featureListStringDict;	// 392 = 0x188
    _Bool audioIsPaused;	// 400 = 0x190
    struct _opaque_pthread_mutex_t pauseLock;	// 408 = 0x198
    NSObject<OS_dispatch_queue> *videoQueue;	// 472 = 0x1d8
    NSObject<OS_dispatch_queue> *videoAsyncQueue;	// 480 = 0x1e0
    NSObject<OS_dispatch_queue> *audioQueue;	// 488 = 0x1e8
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;	// 496 = 0x1f0
    NSArray *mutedPeers;	// 504 = 0x1f8
    int bandwidthUpstream;	// 512 = 0x200
    int bandwidthDownstream;	// 516 = 0x204
    _Bool allowAudioRecording;	// 520 = 0x208
    int aacBlockSize;	// 524 = 0x20c
    _Bool _isUseCaseWatchContinuity;	// 528 = 0x210
    int carrierBitrateCap;	// 532 = 0x214
    struct tagVCAudioFrameFormat _vpioFormat;	// 536 = 0x218
    _Bool allowAudioSwitching;	// 584 = 0x248
    _Bool shouldUpdateLastReceivedPacketTimestamp;	// 585 = 0x249
    double lastReceivedPacketTimestamp;	// 592 = 0x250
    _Bool isRemoteMediaStalled;	// 600 = 0x258
    unsigned int _mediaStallCount;	// 604 = 0x25c
    double _mediaStallTotalTime;	// 608 = 0x260
    double _maxMediaStallTime;	// 616 = 0x268
    double _lastMediaStallStartTime;	// 624 = 0x270
    double _lastDecodedFrameTime;	// 632 = 0x278
    _Bool _isRemoteMediaStalledShort;	// 640 = 0x280
    int packetsSinceStall;	// 644 = 0x284
    int packetsSinceShortMediaStall;	// 648 = 0x288
    int natType;	// 652 = 0x28c
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;	// 656 = 0x290
    TimingCollection *perfTimers;	// 664 = 0x298
    double packetLossRate;	// 672 = 0x2a0
    double timeLastCheckedNetworkConditions;	// 680 = 0x2a8
    double packetLossRateAccum;	// 688 = 0x2b0
    double packetLossRateCount;	// 696 = 0x2b8
    double packetLossRate5Secs;	// 704 = 0x2c0
    double timeLastPLR5Secs;	// 712 = 0x2c8
    double timeLastKnowGoodNetworkPLR;	// 720 = 0x2d0
    double timeLastKnowGoodNetworkRTT;	// 728 = 0x2d8
    double networkConditionsTimeoutInSeconds;	// 736 = 0x2e0
    NSString *peerCN;	// 744 = 0x2e8
    NSString *sessionID;	// 752 = 0x2f0
    double roundTripTime;	// 760 = 0x2f8
    int abnormalOWRDCount;	// 768 = 0x300
    float packetLateAndMissingRatio;	// 772 = 0x304
    int sampleLogCount;	// 776 = 0x308
    double timeSinceLastReportedNoPackets;	// 784 = 0x310
    double noRemotePacketsTimeout;	// 792 = 0x318
    double _remoteMediaStallTimeout;	// 800 = 0x320
    _Bool previousNoRemoteInProgress;	// 808 = 0x328
    _Bool didAttemptSIPInvite;	// 809 = 0x329
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;	// 816 = 0x330
    struct _opaque_pthread_mutex_t qualityDelegateLock;	// 824 = 0x338
    NSObject<OS_dispatch_queue> *qualityQueue;	// 888 = 0x378
    _Bool shouldTimeoutPackets;	// 896 = 0x380
    struct _opaque_pthread_mutex_t srtpLock;	// 904 = 0x388
    _Bool didPrepareSRTP;	// 968 = 0x3c8
    _Bool useRateControl;	// 969 = 0x3c9
    _Bool useAFRC;	// 970 = 0x3ca
    _Bool useVCRC;	// 971 = 0x3cb
    _Bool isRTCPFBEnabled;	// 972 = 0x3cc
    VCCallLinkCongestionDetector *congestionDetector;	// 976 = 0x3d0
    _Bool shouldSendAudio;	// 984 = 0x3d8
    _Bool isGKVoiceChat;	// 985 = 0x3d9
    int _signalStrengthBars;	// 988 = 0x3dc
    int _signalStrengthDisplayBars;	// 992 = 0x3e0
    int _signalStrengthMaxDisplayBars;	// 996 = 0x3e4
    _Bool bBWEstOperatingModeInitialized;	// 1000 = 0x3e8
    _Bool bBWEstNewBWEstModeEnabled;	// 1001 = 0x3e9
    _Bool bBWEstFakeLargeFrameModeEnabled;	// 1002 = 0x3ea
    _Bool bBWEstActiveProbingSenderLog;	// 1003 = 0x3eb
    struct CGSize remoteScreenPortraitAspectRatio;	// 1008 = 0x3f0
    struct CGSize remoteScreenLandscapeAspectRatio;	// 1024 = 0x400
    struct CGSize remoteExpectedPortraitAspectRatio;	// 1040 = 0x410
    struct CGSize remoteExpectedLandscapeAspectRatio;	// 1056 = 0x420
    _Bool isStarted;	// 1072 = 0x430
    NSData *srtpKeyBytes;	// 1080 = 0x438
    _Bool isInitiator;	// 1088 = 0x440
    _Bool sentClientSuccessfulDidStart;	// 1089 = 0x441
    double videoThrottlingTimeout;	// 1096 = 0x448
    unsigned int awdCallNonce;	// 1104 = 0x450
    VCSessionMessaging *messaging;	// 1112 = 0x458
    VCControlChannel *controlChannel;	// 1120 = 0x460
    VCControlChannelMultiWay *secureControlChannel;	// 1128 = 0x468
    _Bool isCurrentNetworkBad;	// 1136 = 0x470
    unsigned int callSessionBitrate;	// 1140 = 0x474
    NSObject<OS_dispatch_queue> *cellTechQueue;	// 1144 = 0x478
    NSObject<OS_dispatch_source> *cellTechChangeSource;	// 1152 = 0x480
    VCBitrateArbiter *callSessionBitrateArbiter;	// 1160 = 0x488
    NSObject<OS_dispatch_source> *connectionTimeoutSource;	// 1168 = 0x490
    NSObject<OS_dispatch_source> *firstRemoteFrameTimemoutSource;	// 1176 = 0x498
    unsigned short maxPacketLength;	// 1184 = 0x4a0
    long long initialSentBytes;	// 1192 = 0x4a8
    long long initialReceivedBytes;	// 1200 = 0x4b0
    struct tagVCAudioReceiver *audioReceiver;	// 1208 = 0x4b8
    VCAudioTransmitter *audioTransmitter;	// 1216 = 0x4c0
    VCCaptionsReceiver *_captionsReceiver;	// 1224 = 0x4c8
    struct tagHANDLE *hVideoReceiver;	// 1232 = 0x4d0
    struct tagHANDLE *hVideoTransmitter;	// 1240 = 0x4d8
    VCDisplayLink *_displayLink;	// 1248 = 0x4e0
    VCRedundancyControllerVideo *_videoRedundancyController;	// 1256 = 0x4e8
    _Bool remoteSupportsVisibleRect;	// 1264 = 0x4f0
    _Bool remoteSupportsExpectedAspectRatio;	// 1265 = 0x4f1
    _Bool canLocalResizePIP;	// 1266 = 0x4f2
    _Bool canRemoteResizePIP;	// 1267 = 0x4f3
    _Bool receivedFirstRemoteFrame;	// 1268 = 0x4f4
    int fecMode;	// 1272 = 0x4f8
    NSObject<OS_dispatch_source> *sessionHealthMonitor;	// 1280 = 0x500
    VideoAttributes *remoteVideoAttributes;	// 1288 = 0x508
    double lastVideoQualityNotificationUpdate;	// 1296 = 0x510
    double lastVideoCallAlarmTime;	// 1304 = 0x518
    unsigned int remoteFrameWidth;	// 1312 = 0x520
    unsigned int remoteFrameHeight;	// 1316 = 0x524
    VCWCMClient *vcWCMClient;	// 1320 = 0x528
    WRMClient *vcWRMClient;	// 1328 = 0x530
    _Bool iRATSuggestionEnabled;	// 1336 = 0x538
    struct OpaqueVTPixelTransferSession *hdTransferSession;	// 1344 = 0x540
    struct __CVPixelBufferPool *hdBufferPool;	// 1352 = 0x548
    struct CGSize expectedDecodeSize;	// 1360 = 0x550
    struct opaqueRTCReporting *reportingAgent;	// 1376 = 0x560
    int reportingModuleID;	// 1384 = 0x568
    _Bool didReportNoRemotePackets;	// 1388 = 0x56c
    _Bool didReportLongConnectionTime;	// 1389 = 0x56d
    _Bool didReportAudioStall;	// 1390 = 0x56e
    _Bool enableRateControlDump;	// 1391 = 0x56f
    unsigned int _targetBitrate;	// 1392 = 0x570
    unsigned int _rateChangeCounter;	// 1396 = 0x574
    unsigned int awdTime;	// 1400 = 0x578
    int operatingMode;	// 1404 = 0x57c
    struct SKEStateOpaque *skeState;	// 1408 = 0x580
    struct __CFData *secretKey;	// 1416 = 0x588
    VCSecureDataChannel *secureDataChannel;	// 1424 = 0x590
    NSString *basebandCodecType;	// 1432 = 0x598
    NSNumber *basebandCodecSampleRate;	// 1440 = 0x5a0
    unsigned int dwRTT_ice;	// 1448 = 0x5a8
    NSObject<OS_dispatch_queue> *timestampQueue;	// 1456 = 0x5b0
    _Bool shouldSendBlackFrame;	// 1464 = 0x5b8
    unsigned int _peerProtocolVersion;	// 1468 = 0x5bc
    struct tagWRMMetricsInfo *wrmInfo;	// 1472 = 0x5c0
    _Bool _shouldReportWRMMetrics;	// 1480 = 0x5c8
    _Bool _inviteDataRequested;	// 1481 = 0x5c9
    unsigned int _transportType;	// 1484 = 0x5cc
    VCTransportSession *_transportSession;	// 1488 = 0x5d0
    _Bool _cleanupDone;	// 1496 = 0x5d8
    _Bool _isLocalCellular_LowestConnectionQuality;	// 1497 = 0x5d9
    _Bool _isRemoteCellular_LowestConnectionQuality;	// 1498 = 0x5da
    _Bool _isConnectedOnIPv6_LowestConnectionQuality;	// 1499 = 0x5db
    void *_callLogFile;	// 1504 = 0x5e0
    NSString *peerReportingID;	// 1512 = 0x5e8
    _Bool _isWRMNotificationPending;	// 1520 = 0x5f0
    CDStruct_cd8cfafa _savedWRMNotification;	// 1528 = 0x5f8
    double _initTime;	// 1688 = 0x698
}

+ (id)keyPathsForValuesAffectingNetworkQuality;	// IMP=0x00100000001976e8
+ (void)stopSecureControlChannel:(id)arg1;	// IMP=0x00100000001bcd17
+ (id)getDecodePayloadTypes:(int)arg1 secondaryPayloadTypes:(id)arg2;	// IMP=0x00100000001b16a3
+ (int)setRxPayloadList:(struct tagHANDLE *)arg1 withPayloadTypes:(id)arg2 isRedEnabled:(_Bool)arg3;	// IMP=0x00100000001ab02f
+ (int)setRxPayloadList:(struct tagHANDLE *)arg1 withPayloadTypes:(id)arg2;	// IMP=0x00100000001ab013
@property(retain) NSData *srtpKeyBytes; // @synthesize srtpKeyBytes;
@property double lastDecodedFrameTime; // @synthesize lastDecodedFrameTime=_lastDecodedFrameTime;
@property(copy, nonatomic) NSString *peerReportingID; // @synthesize peerReportingID;
@property(readonly) VCCallInfo *localCallInfo; // @synthesize localCallInfo;
@property _Bool didSend200OK; // @synthesize didSend200OK;
@property long long sipState; // @synthesize sipState=_sipState;
@property int deviceRole; // @synthesize deviceRole=_deviceRole;
@property(copy, nonatomic) NSString *basebandCodecType; // @synthesize basebandCodecType;
@property(retain, nonatomic) NSNumber *basebandCodecSampleRate; // @synthesize basebandCodecSampleRate;
@property(readonly) _Bool isRemoteMediaStalled; // @synthesize isRemoteMediaStalled;
@property(nonatomic) int operatingMode; // @synthesize operatingMode;
@property unsigned int remoteFrameHeight; // @synthesize remoteFrameHeight;
@property unsigned int remoteFrameWidth; // @synthesize remoteFrameWidth;
@property(readonly) struct tagVCAudioReceiver *audioReceiver; // @synthesize audioReceiver;
@property(retain, nonatomic) VideoAttributes *remoteVideoAttributes; // @synthesize remoteVideoAttributes;
@property(retain, nonatomic) VCImageAttributeRules *imageAttributeRules; // @synthesize imageAttributeRules;
@property(nonatomic) _Bool isStarted; // @synthesize isStarted;
@property(nonatomic) _Bool shouldSendAudio; // @synthesize shouldSendAudio;
@property(nonatomic) _Bool isRTCPFBEnabled; // @synthesize isRTCPFBEnabled;
@property(nonatomic) _Bool useRateControl; // @synthesize useRateControl;
@property _Bool shouldTimeoutPackets; // @synthesize shouldTimeoutPackets;
@property(copy, nonatomic) NSString *sessionID; // @synthesize sessionID;
@property(nonatomic) float packetLateAndMissingRatio; // @synthesize packetLateAndMissingRatio;
@property(nonatomic) int signalStrengthMaxDisplayBars; // @synthesize signalStrengthMaxDisplayBars=_signalStrengthMaxDisplayBars;
@property(nonatomic) int signalStrengthDisplayBars; // @synthesize signalStrengthDisplayBars=_signalStrengthDisplayBars;
@property(nonatomic) int signalStrengthBars; // @synthesize signalStrengthBars=_signalStrengthBars;
@property(nonatomic) double roundTripTime; // @synthesize roundTripTime;
@property(nonatomic) double networkConditionsTimeoutInSeconds; // @synthesize networkConditionsTimeoutInSeconds;
@property(nonatomic) double packetLossRate5Secs; // @synthesize packetLossRate5Secs;
@property(nonatomic) double packetLossRate; // @synthesize packetLossRate;
@property(copy, nonatomic) NSString *peerCN; // @synthesize peerCN;
@property(nonatomic) int natType; // @synthesize natType;
@property(readonly) _Bool audioIsPaused; // @synthesize audioIsPaused;
@property(retain, nonatomic) NSArray *mutedPeers; // @synthesize mutedPeers;
@property int bandwidthDownstream; // @synthesize bandwidthDownstream;
@property int bandwidthUpstream; // @synthesize bandwidthUpstream;
@property _Bool useUEP; // @synthesize useUEP;
@property _Bool useControlByte; // @synthesize useControlByte;
@property int preferredAudioCodec; // @synthesize preferredAudioCodec;
@property unsigned int lastReceived; // @synthesize lastReceived;
@property(retain, nonatomic) GKRingBuffer *ringBuf; // @synthesize ringBuf;
@property struct tagHANDLE *hAFRC; // @synthesize hAFRC;
@property struct tagHANDLE *hMediaQueue; // @synthesize hMediaQueue;
@property _Bool receivedSIPInvite; // @synthesize receivedSIPInvite;
@property _Bool isWaitingForICEResult; // @synthesize isWaitingForICEResult;
@property(readonly) _Bool isAudioRunning; // @synthesize isAudioRunning;
@property(retain) NSObject<VCCallSessionDelegate> *delegate; // @synthesize delegate;
@property long long sampleRate; // @synthesize sampleRate;
@property long long videoPayload; // @synthesize videoPayload;
@property long long state; // @synthesize state;
@property unsigned short maxPacketLength; // @synthesize maxPacketLength;
@property(retain) VCConnectionManager *connectionManager; // @synthesize connectionManager;
@property long long connectionChangeState; // @synthesize connectionChangeState;
@property struct tagHANDLE *rtpHandle; // @synthesize rtpHandle;
- (void)redundancyController:(id)arg1 redundancyPercentageDidChange:(unsigned int)arg2;	// IMP=0x00000000001a50ad
- (void)redundancyController:(id)arg1 redundancyVectorDidChange:(CDStruct_d7e2e0ee)arg2;	// IMP=0x00000000001a50a7
- (void)redundancyController:(id)arg1 redundancyIntervalDidChange:(double)arg2;	// IMP=0x00000000001a50a1
- (void)setupSecureDataChannel;	// IMP=0x00000000001a4e24
- (void)handleKeyExchangeCompleted;	// IMP=0x00000000001a4df6
- (void)updateCachedConnectionState;	// IMP=0x00000000001a4cae
- (void)handleFirstConnectionSetup:(id)arg1;	// IMP=0x00000000001a4563
- (void)handleNewConnectionSetup:(id)arg1 isInitialConnection:(_Bool)arg2;	// IMP=0x00000000001a4319
- (void)notifyDelegateActiveConnectionDidChange;	// IMP=0x00000000001a4166
- (void)handlePrimaryConnectionChanged:(id)arg1 oldPrimaryConnection:(id)arg2;	// IMP=0x00000000001a4154
- (void)triggerInterfaceChange;	// IMP=0x00000000001a410b
@property(readonly) _Bool isVideoRunning;
- (void)reportingMomentsWithRequest:(id)arg1;	// IMP=0x00000000001a3f44
- (void)reportSymptom:(unsigned int)arg1;	// IMP=0x00000000001a3f2f
- (void)messageVCMomentsRequest:(id)arg1;	// IMP=0x00000000001a3f29
- (void)setPeerProtocolVersion:(unsigned int)arg1;	// IMP=0x00000000001a3e57
- (void)setSessionConferenceVisualRectangle:(struct CGRect)arg1 callID:(unsigned int)arg2;	// IMP=0x00000000001a3c29
- (void)setSessionConferenceState:(unsigned int)arg1 callID:(unsigned int)arg2;	// IMP=0x00000000001a3a73
- (unsigned int)currentAudioCap;	// IMP=0x00000000001a39cf
@property(readonly, nonatomic) NSDictionary *dtxMetrics;
@property(readonly, nonatomic) int audioTierPayload;
@property(readonly, nonatomic) int audioTierRedNumPayloads;
@property(readonly, nonatomic) int audioTierPacketsPerBundle;
@property(readonly, nonatomic) int audioTierAudioCodecBitrate;
@property(readonly, nonatomic) int audioTierNetworkBitrate;
@property(readonly, nonatomic) struct opaqueRTCReporting *reportingAgent;
@property(retain) VCCapabilities *capabilities;
- (unsigned int)primaryConnectionType;	// IMP=0x00000000001a369c
@property(readonly) _Bool isSKEOptimizationEnabled;
- (_Bool)pullAudioSamples:(struct opaqueVCAudioBufferList *)arg1 rtpTimestamp:(unsigned int *)arg2 lastReceivedAudioTime:(double *)arg3 padding:(char *)arg4 paddingLength:(char *)arg5 silence:(int *)arg6;	// IMP=0x00000000001a3596
- (id)callMetadata;	// IMP=0x00000000001a3367
- (int)negotiatedReceivingFramerate;	// IMP=0x00000000001a3000
- (id)localParticipantID;	// IMP=0x00000000001a2fea
- (id)remoteParticipantID;	// IMP=0x00000000001a2fd4
- (void)sendData:(id)arg1 messageType:(unsigned int)arg2 encrypted:(_Bool)arg3;	// IMP=0x00000000001a2de2
- (void)sendARPLData:(id)arg1 toCallID:(unsigned int)arg2;	// IMP=0x00000000001a2cef
- (void)rcvdFirstRemoteFrame;	// IMP=0x00000000001a2bf1
- (void)processCancelRelayRequest:(id)arg1 didOriginateRequest:(_Bool)arg2;	// IMP=0x00000000001a2ad3
- (void)processRelayUpdateDict:(id)arg1 didOriginateRequest:(_Bool)arg2;	// IMP=0x00000000001a287a
- (void)processRelayRequestResponseDict:(id)arg1 didOriginateRequest:(_Bool)arg2;	// IMP=0x00000000001a26cf
- (_Bool)stillWantsToRelay;	// IMP=0x00000000001a26bd
- (_Bool)setPauseVideo:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000000001a26a6
- (_Bool)setPauseVideo:(_Bool)arg1 force:(_Bool)arg2 error:(id *)arg3;	// IMP=0x00000000001a2341
- (void)setResumeVideo;	// IMP=0x00000000001a219c
- (void)setSuspendVideo;	// IMP=0x00000000001a1ff7
- (_Bool)setPauseAudio:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000000001a1fe0
- (_Bool)setPauseAudio:(_Bool)arg1 force:(_Bool)arg2 error:(id *)arg3;	// IMP=0x00000000001a1833
- (void)setResumeAudio;	// IMP=0x00000000001a16ff
- (void)setSuspendAudio;	// IMP=0x00000000001a15bb
- (_Bool)isCallOngoing;	// IMP=0x00000000001a159d
- (void)processRemoteIPChange:(id)arg1 callID:(unsigned int)arg2;	// IMP=0x00000000001a153f
@property _Bool isGKVoiceChat;
@property(readonly) unsigned int lastSentAudioSampleTime;
@property unsigned char inputMeter;
@property(readonly) int bundledPackets;
@property(readonly) int numBufferBytesAvailable;
@property int packetsPerBundle;
- (void)setRemoteCallInfoFromInviteDictionary:(id)arg1;	// IMP=0x00000000001a0f85
- (void)addLocalCallInfoToInviteDictionary:(id)arg1;	// IMP=0x00000000001a0c56
- (id)inviteDataForParticipantID:(id)arg1 callID:(unsigned int *)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id *)arg5;	// IMP=0x00000000001a077b
- (_Bool)isLowBitrateCodecPreferred:(id)arg1;	// IMP=0x00000000001a06e8
- (void)reportOperatingMode;	// IMP=0x00000000001a05c9
- (id)newMediaBlobWithRemoteMediaBlob:(id)arg1 localCallID:(unsigned int)arg2 isLowBitrateCodecPreferred:(_Bool)arg3;	// IMP=0x000000000019fd44
- (id)newMediaNegotiatorAudioConfigurationWithAllowAudioSwitching:(_Bool)arg1 useSBR:(_Bool)arg2 aacBlockSize:(unsigned int)arg3;	// IMP=0x000000000019fba9
- (_Bool)cancel:(id)arg1;	// IMP=0x000000000019fb8c
- (_Bool)disconnect:(id)arg1 didRemoteCancel:(_Bool)arg2;	// IMP=0x000000000019fb72
- (void)requestWRMNotification;	// IMP=0x000000000019fa9c
- (void)sendWRMStatusUpdate:(const CDStruct_8aeecdac *)arg1;	// IMP=0x000000000019f99e
- (void)setPreWarmState:(_Bool)arg1;	// IMP=0x000000000019f932
- (void)setWRMCoexMetrics:(id)arg1;	// IMP=0x000000000019f783
- (void)setWRMNotification:(CDStruct_cd8cfafa *)arg1;	// IMP=0x000000000019f497
- (void)setWRMMetricConfig:(CDStruct_69d7cc99 *)arg1;	// IMP=0x000000000019f486
- (void)reportImmediateWRMMetric:(int)arg1 value:(unsigned long long)arg2;	// IMP=0x000000000019f462
- (void)reportWRMMetrics:(const CDStruct_dea828ac *)arg1;	// IMP=0x000000000019f449
- (void)cleanupWRMClient;	// IMP=0x000000000019f2f5
- (void)setupWRMClient;	// IMP=0x000000000019edce
- (void)setupABTesting;	// IMP=0x000000000019e775
- (void)applyNegotiatedFaceTimeSettings;	// IMP=0x000000000019e6f1
- (void)handleReceivedPiggybackBlobLegacy:(id)arg1;	// IMP=0x000000000019e67f
- (void)handleReceivedPiggybackBlobIDS:(id)arg1;	// IMP=0x000000000019e41f
- (_Bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingInviteData:(id)arg3 isCaller:(_Bool)arg4 capabilities:(id)arg5 idsSocket:(int)arg6 destination:(id)arg7 error:(id *)arg8;	// IMP=0x000000000019d387
@property(readonly, nonatomic) _Bool isCaller;
- (void)updateVCRateControlWRMMetrics:(struct tagWRMMetricsInfo *)arg1;	// IMP=0x000000000019d2bc
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x000000000019d093
- (_Bool)isLocalOrRemoteOnCellular;	// IMP=0x000000000019cfc8
- (void)cancelFirstRemoteFrameTimer;	// IMP=0x000000000019cf8b
- (void)setUpFirstRemoteFrameTimer;	// IMP=0x000000000019ce09
- (void)setupConnectionTimeoutTimerWithErrorCode:(int)arg1 detailedCode:(int)arg2 description:(id)arg3 reason:(id)arg4;	// IMP=0x000000000019cb92
- (void)cancelConnectionTimeoutTimer;	// IMP=0x000000000019ca9a
- (void)timeoutUnfinishedConnection;	// IMP=0x000000000019ca34
- (id)activeControlChannel;	// IMP=0x000000000019ca0c
- (unsigned char)defaultMediaControlInfoFECFeedbackVersion;	// IMP=0x000000000019c99c
- (_Bool)isFECGeneratorEnabled;	// IMP=0x000000000019c994
- (unsigned char)mediaControlInfoFECFeedbackVersion;	// IMP=0x000000000019c965
- (_Bool)isSecureMessagingRequired;	// IMP=0x000000000019c91a
- (_Bool)isSIPEnabled;	// IMP=0x000000000019c8b9
- (void)dealloc;	// IMP=0x000000000019c230
- (void)updateLastReceivedPacket:(_Bool)arg1 packetType:(int)arg2;	// IMP=0x000000000019c1f9
- (void)updateLastReceivedAudioTime;	// IMP=0x000000000019c1c9
- (void)checkAbnormalOWRDAndResetLagReference;	// IMP=0x000000000019c14b
- (void)updateLastReceivedPacketWithTimestamp:(double)arg1 packetType:(int)arg2;	// IMP=0x000000000019b321
- (void)updateRemoteMediaStallStateReporting:(double)arg1;	// IMP=0x000000000019b09b
- (void)updateRemoteMediaStallState:(double)arg1;	// IMP=0x000000000019ad85
@property(readonly) double networkQuality;
- (int)getAudioTxBitrate;	// IMP=0x000000000019ac8b
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
- (void)primaryConnectionDidChangeTo:(id)arg1 oldConnection:(id)arg2;	// IMP=0x000000000019ac40
- (void)handlePendingPrimaryConnectionChange;	// IMP=0x000000000019a9f9
- (void)schedulePrimaryConnectionChange:(id)arg1 oldConnection:(id)arg2;	// IMP=0x000000000019a7b2
- (void)resetVideoRulesForInterface:(int)arg1 videoReportingDictionary:(id)arg2;	// IMP=0x000000000019a7ac
- (void)setCurrentEncodeRule:(id)arg1;	// IMP=0x000000000019a778
- (id)getVideoRuleForVideoMode:(unsigned long long)arg1 interface:(int)arg2 sessionBitrate:(int *)arg3;	// IMP=0x000000000019a5d5
- (_Bool)chooseVideoPayloadForInterface:(int)arg1;	// IMP=0x000000000019a048
- (int)applyFeatureListStringForPayload:(int)arg1;	// IMP=0x00000000001996db
- (id)getFeatureListStringForPayload:(int)arg1;	// IMP=0x000000000019957b
- (void)remoteCellTechStateUpdate:(int)arg1 maxRemoteBitrate:(unsigned int)arg2;	// IMP=0x0000000000199139
- (void)thermalLevelDidChange:(int)arg1;	// IMP=0x00000000001990ee
- (void)handleCellularMTUChanged:(unsigned short)arg1;	// IMP=0x000000000019903e
- (void)handleCellTechChange:(int)arg1;	// IMP=0x0000000000198638
- (void)reportHandoverResultsWithDictionary:(id)arg1 localBitrateCap:(int)arg2 remoteBitrateCap:(int)arg3;	// IMP=0x0000000000198545
- (void)updateMaxPktLength;	// IMP=0x00000000001982cc
- (_Bool)evaluateEnableRRx:(int *)arg1;	// IMP=0x000000000019805c
- (_Bool)isBetterForSIPInviteWithSourceDestinationInfo:(struct tagVCSourceDestinationInfo *)arg1 thanSession:(id)arg2;	// IMP=0x0000000000197fe2
- (void)updateVideoQualityStatusWithTime:(double)arg1 isRemote:(_Bool)arg2;	// IMP=0x0000000000197d44
@property(readonly) _Bool videoIsPaused;
- (void)startAWDStats;	// IMP=0x0000000000197c92
- (void)configureRateController;	// IMP=0x0000000000197b25
- (unsigned int)callID;	// IMP=0x000000000019771f
@property(nonatomic) _Bool useCompressedConnectionData;
@property(nonatomic) _Bool requiresWifi;
@property(readonly) _Bool isCurrentPayloadTypeValid;
- (void)gatherRealtimeStats:(struct __CFDictionary *)arg1;	// IMP=0x00000000001975dd
- (id)initWithDeviceRole:(int)arg1 transportType:(unsigned int)arg2 isGKVoiceChat:(_Bool)arg3 reportingHierarchyToken:(id)arg4;	// IMP=0x000000000019656a
- (id)init;	// IMP=0x000000000019654e
@property(readonly, copy) NSString *description;
- (void)vcSecureDataChannel:(id)arg1 messageType:(unsigned int)arg2 receivedData:(id)arg3;	// IMP=0x00000000001a55d1
- (void)wcmGetCallConfig:(unsigned int *)arg1 targetBitrate:(unsigned int *)arg2;	// IMP=0x00000000001a57e1
- (void)wcmSetCallConfig:(unsigned int)arg1 interferenceLevel:(unsigned int)arg2;	// IMP=0x00000000001a56d9
- (void)didReceiveCaptions:(id)arg1;	// IMP=0x00000000001a5916
- (int)sipCallback:(int)arg1 callID:(unsigned int)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void *)arg5 confIndex:(int *)arg6;	// IMP=0x00000000001a591c
- (_Bool)disconnectInternal:(_Bool)arg1 disconnectError:(id)arg2 didRemoteCancel:(_Bool)arg3;	// IMP=0x00000000001bc2fa
- (int)mapPacketMultiplexModeToSIPMode:(long long)arg1;	// IMP=0x00000000001bc281
- (int)mapPacketMultiplexModeToRTPMode:(long long)arg1;	// IMP=0x00000000001bc208
- (void)handleDuplicationEnabled:(_Bool)arg1 activeConnection:(id)arg2;	// IMP=0x00000000001bc202
- (void)setDuplicationFlag:(_Bool)arg1 withPreferredLocalLinkTypeForDuplication:(int)arg2 notifyPeer:(_Bool)arg3;	// IMP=0x00000000001bc1fc
- (void)sendSymptomToRemote:(id)arg1 groupID:(id)arg2;	// IMP=0x00000000001bc13b
- (void)shouldSendBlackFrame:(_Bool)arg1;	// IMP=0x00000000001bc12f
- (void)sendBasebandCodecMessage;	// IMP=0x00000000001bbcfa
- (void)disableSessionHealthMonitor;	// IMP=0x00000000001bbcbd
- (double)audioTransmittingBitrateKbps;	// IMP=0x00000000001bbc39
- (double)audioReceivingBitrateKbps;	// IMP=0x00000000001bbbcb
- (void)enableSessionHealthMonitor;	// IMP=0x00000000001bb9a9
- (void)logConnectionSuccess;	// IMP=0x00000000001bb8ac
- (unsigned int)maxBitrateForConnectionType;	// IMP=0x00000000001bb59b
- (void)adjustBitrateForConnectionType;	// IMP=0x00000000001bb570
- (void)setupBitrateNegotiation;	// IMP=0x00000000001bb4e9
- (const char *)matchedFeaturesStringForPayload:(int)arg1;	// IMP=0x00000000001bb4be
- (_Bool)setMatchedFeaturesString:(char *)arg1 localFeaturesString:(id)arg2 remoteFeaturesString:(id)arg3;	// IMP=0x00000000001bafb4
- (id)allPayloadsLocalFeaturesString;	// IMP=0x00000000001baf78
- (id)pickFeaturesStringForPayload:(int)arg1 featureListDict:(id)arg2 remote:(_Bool)arg3;	// IMP=0x00000000001bad11
- (void)logIdentity:(struct __SecIdentity *)arg1;	// IMP=0x00000000001ba930
- (void)setLocalIdentityForKeyExchange;	// IMP=0x00000000001ba5c6
- (int)Conference_SetBWEstMode:(_Bool)arg1 bFakeLargeFrameMode:(_Bool)arg2;	// IMP=0x00000000001ba48c
- (void)notifyDelegateSessionStarted;	// IMP=0x00000000001ba382
- (void)doSipEndAction:(int)arg1 callID:(unsigned int)arg2 error:(id)arg3;	// IMP=0x00000000001ba1d3
- (void)disconnectWithNoRemotePackets:(long long)arg1 timeoutUsed:(double)arg2;	// IMP=0x00000000001b9fcd
- (void)disconnectWithNoRemotePackets:(long long)arg1;	// IMP=0x00000000001b9fb3
- (void)doSipEndProc:(id)arg1;	// IMP=0x00000000001b9f48
- (unsigned int)videoRTPID;	// IMP=0x00000000001b9e9c
- (unsigned int)audioRTPID;	// IMP=0x00000000001b9d79
- (_Bool)shouldNotifyDelegateDidStartBeforeAudioSetup;	// IMP=0x00000000001b9cfe
- (void)sipConnectThreadProc:(id)arg1;	// IMP=0x00000000001b9831
- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)arg1 withReason:(const char *)arg2;	// IMP=0x00000000001b9485
- (_Bool)chooseDTXPayloads:(id)arg1;	// IMP=0x00000000001b9418
- (_Bool)chooseSecondaryPayloads:(id)arg1;	// IMP=0x00000000001b92ab
- (_Bool)choosePayload:(id)arg1;	// IMP=0x00000000001b89f4
- (unsigned int)codecBitmapForPayloads:(id)arg1;	// IMP=0x00000000001b881b
- (_Bool)setupAudioCodecWithPayload:(int)arg1;	// IMP=0x00000000001b86c8
- (id)negotiatedAudioPayloadTypes;	// IMP=0x00000000001b851a
- (id)addAudioPayload:(int)arg1;	// IMP=0x00000000001b849f
- (id)newConfigForPayloadType:(int)arg1;	// IMP=0x00000000001b8049
- (void)setupAACELDPayload:(int)arg1;	// IMP=0x00000000001b7f87
- (_Bool)stopRateControl:(id *)arg1;	// IMP=0x00000000001b7eba
- (_Bool)startRateControl:(id *)arg1;	// IMP=0x00000000001b7d84
- (_Bool)startVCRC:(id *)arg1;	// IMP=0x00000000001b7a8b
- (_Bool)startAFRC:(id *)arg1;	// IMP=0x00000000001b7263
- (id)vcrcServerBag;	// IMP=0x00000000001b70a2
- (unsigned int)vcrcServerBagProfileNumber;	// IMP=0x00000000001b6f54
- (_Bool)stopMediaQueue:(id *)arg1;	// IMP=0x00000000001b6f2a
- (_Bool)startMediaQueue:(id *)arg1;	// IMP=0x00000000001b6e76
- (_Bool)getVideoSettings:(int)arg1 forInterface:(int)arg2 payload:(int)arg3 width:(int *)arg4 height:(int *)arg5 framerate:(int *)arg6 bitRate:(int *)arg7;	// IMP=0x00000000001b6e5d
- (_Bool)stopVideo:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000000001b6e0c
- (_Bool)stopVideoReceive:(id *)arg1 isPausing:(_Bool)arg2;	// IMP=0x00000000001b6e04
- (_Bool)stopVideoSend:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000000001b6dfc
- (_Bool)startVideo:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000000001b6da7
- (_Bool)startVideoReceive:(id *)arg1;	// IMP=0x00000000001b6d9f
- (_Bool)startVideoSend:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000000001b6d97
- (int)interfaceForCurrentCall;	// IMP=0x00000000001b6d53
- (_Bool)setupAudioCookies;	// IMP=0x00000000001b6a24
- (void)sendCallingModeMessage;	// IMP=0x00000000001b68bf
- (void)updateDeviceRole:(int)arg1;	// IMP=0x00000000001b5c9b
- (void)enableAudio:(_Bool)arg1;	// IMP=0x00000000001b5aeb
- (void)startAudioIOWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000001b556c
- (void)startAudioWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000001b5014
- (void)stopAudioIO:(CDUnknownBlockType)arg1;	// IMP=0x00000000001b4e4a
- (void)stopAudioWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000001b4d5c
- (_Bool)sipConnectWithError:(id *)arg1;	// IMP=0x00000000001b4a6b
- (_Bool)setupCallerRTPChannelWithError:(id *)arg1;	// IMP=0x00000000001b4703
- (_Bool)setMediaQueueStreamSettings;	// IMP=0x00000000001b467f
- (_Bool)setRTPPayloads:(id)arg1 withError:(id *)arg2;	// IMP=0x00000000001b428c
- (id)getCompatibleLocalFeatureListForPayloads:(int *)arg1 count:(int)arg2;	// IMP=0x00000000001b3f54
- (int)getAllCompatibleVideoPayloads:(int **)arg1 forMediaType:(int)arg2;	// IMP=0x00000000001b39e1
- (_Bool)doesVideoPayloadMatchRemoteImageAttributeRules:(id)arg1;	// IMP=0x00000000001b3805
- (_Bool)isValidVideoPayloadOverride:(id)arg1;	// IMP=0x00000000001b3741
- (_Bool)chooseVideoPayload:(id)arg1 operatingMode:(int)arg2 isLocalOnCellular:(_Bool)arg3 isRemoteOnCellular:(_Bool)arg4;	// IMP=0x00000000001b335d
- (_Bool)canNegotiateVideoPayload:(int)arg1 supportedPayloads:(id)arg2 isLocalOnCellular:(_Bool)arg3 isRemoteOnCellular:(_Bool)arg4;	// IMP=0x00000000001b3235
- (_Bool)negotiateMaxBandwidth:(int *)arg1;	// IMP=0x00000000001b2fa8
- (_Bool)negotiatePayloads:(id *)arg1 withError:(id *)arg2;	// IMP=0x00000000001b1b43
- (void)negotiateFeaturesString:(id)arg1 forPayload:(int)arg2;	// IMP=0x00000000001b1870
- (_Bool)createMediaQueueHandle:(id *)arg1;	// IMP=0x00000000001b1550
- (_Bool)prepareSRTPWithError:(id *)arg1;	// IMP=0x00000000001b12b9
- (void)releaseRTPHandles;	// IMP=0x00000000001b124a
- (_Bool)createRTPHandles:(id *)arg1;	// IMP=0x00000000001b0a17
- (_Bool)createAudioTransmitter:(id *)arg1;	// IMP=0x00000000001b018d
- (int)processMediaControlInfo:(void *)arg1 isAudio:(_Bool)arg2;	// IMP=0x00000000001b00b5
- (int)fillMediaControlInfo:(void *)arg1;	// IMP=0x00000000001b0011
- (_Bool)treatAsCellular;	// IMP=0x00000000001aff6c
- (_Bool)sendSIPInviteWithError:(id *)arg1;	// IMP=0x00000000001afb3e
- (_Bool)establishSIPDialogWithSDP:(id)arg1 error:(id *)arg2;	// IMP=0x00000000001af7d6
- (id)createInviteSDPWithError:(id *)arg1;	// IMP=0x00000000001aebe3
- (_Bool)canSendSIPInviteWithError:(id *)arg1;	// IMP=0x00000000001aeb34
- (void)getAllPayloadsForScreen:(int **)arg1 count:(int *)arg2;	// IMP=0x00000000001ae9f5
- (void)getAllPayloadsForVideo:(int **)arg1 count:(int *)arg2;	// IMP=0x00000000001ae5db
- (void)getAllPayloadsForAudio:(int **)arg1 count:(int *)arg2 secondaryPayloads:(int **)arg3 secondaryCount:(int *)arg4;	// IMP=0x00000000001ae45c
- (int)handleIncomingWithCallID:(unsigned int)arg1 msgIn:(const char *)arg2 msgOut:(char *)arg3 optional:(void *)arg4 confIndex:(int *)arg5 error:(id *)arg6;	// IMP=0x00000000001ad4ed
- (_Bool)startMediaWithPreNegotiatedSettings:(id *)arg1;	// IMP=0x00000000001ac4fc
- (void)applyNegotiatedMomentsSettings;	// IMP=0x00000000001ac474
- (void)applyNegotiatedCaptionsSettings;	// IMP=0x00000000001ac46e
- (_Bool)applyNegotiatedVideoSettings:(id *)arg1;	// IMP=0x00000000001ab95b
- (_Bool)applyNegotiatedAudioSettings:(id *)arg1;	// IMP=0x00000000001ab18b
- (void)applyNegotiatedSettings;	// IMP=0x00000000001aad78
- (void)negotiateMediaMaxBandwidth;	// IMP=0x00000000001aaafe
- (_Bool)createSDP:(int *)arg1 audioPayloadCount:(int)arg2 secondaryPayloadTypes:(int *)arg3 secondaryPayloadCount:(int)arg4 videoPayloadTypes:(int *)arg5 videoPayloadCount:(int)arg6 localFeatureList:(id)arg7 answerBandwidth:(int)arg8 maxBandwidth:(int)arg9 imageSizesSend:(struct imageTag **)arg10 imageSendCount:(int *)arg11 imageSizesRecv:(struct imageTag **)arg12 imageRecvCount:(int *)arg13 sdp:(char *)arg14 numSDPBytes:(int *)arg15 error:(id *)arg16;	// IMP=0x00000000001aa520
- (void)addScreenConfigToSDP:(id)arg1;	// IMP=0x00000000001aa227
- (void)setupCalleeSIPStartTimeout:(float)arg1;	// IMP=0x00000000001a9ea8
- (void)resetState;	// IMP=0x00000000001a9ded
- (void)unlock;	// IMP=0x00000000001a9ddc
- (void)lock;	// IMP=0x00000000001a9dcb
- (void)processSIPMessage:(char *)arg1 msgOut:(char *)arg2 optional:(void *)arg3 confIndex:(int *)arg4;	// IMP=0x00000000001a9694
- (void)remotePauseDidChangeToState:(_Bool)arg1 forVideo:(_Bool)arg2;	// IMP=0x00000000001a950b
- (void)sendTimings;	// IMP=0x00000000001a94d8
- (void)logPerfTimings;	// IMP=0x00000000001a9381
- (void)stopPausedHeartbeat;	// IMP=0x00000000001a9289
- (void)startPausedHeartbeat;	// IMP=0x00000000001a90a5
- (void)cleanupMedia;	// IMP=0x00000000001a8f14
- (void)reportDashboardEndResult:(_Bool)arg1;	// IMP=0x00000000001a8c1d
- (long long)calculateSIPEndAction:(_Bool)arg1 currentState:(long long)arg2 error:(id)arg3;	// IMP=0x00000000001a8ba1
- (void)notifyDelegateAndEndCall:(long long)arg1 didRemoteCancel:(_Bool)arg2 error:(id)arg3;	// IMP=0x00000000001a883c
- (struct __SecIdentity *)retrieveIdentity;	// IMP=0x00000000001a8825
- (void)setupPeerInfo:(id)arg1 usingInviteData:(id)arg2 isCaller:(_Bool)arg3 capabilities:(id)arg4;	// IMP=0x00000000001a85bf
- (void)setupDTLSDefaults;	// IMP=0x00000000001a83aa
- (void)logDetailedNetworkInformation;	// IMP=0x00000000001a817f
- (void)updateNetworkCheckHint:(double)arg1;	// IMP=0x00000000001a803a
- (void)initWithRelevantStorebagEntries;	// IMP=0x00000000001a7de3
- (int)setupEncryptionWithKey:(const struct __CFData **)arg1 confIndex:(int *)arg2;	// IMP=0x00000000001a7d26
- (id)newSKEBlobWithRemoteSKEBlob:(id)arg1;	// IMP=0x00000000001a7ae2
- (_Bool)configureLegacyTransportWithInviteInfo:(id)arg1 error:(id *)arg2;	// IMP=0x00000000001a77dc
- (int)setSKEBlobOnTransportSession;	// IMP=0x00000000001a76e3
- (_Bool)setupIDSConnectionForCallID:(unsigned int)arg1 destination:(id)arg2 socket:(int)arg3 error:(id *)arg4;	// IMP=0x00000000001a74a2
- (void)handleMediaReceivedOverRelayLinkWithConnectionId:(int)arg1;	// IMP=0x00000000001a7489
- (void)handleMediaReceivedOverPeerToPeerLinkWithConnectionId:(int)arg1;	// IMP=0x00000000001a7470
- (int)flushBasebandQueueWithPayloads:(id)arg1 flushCount:(unsigned int *)arg2;	// IMP=0x00000000001a7468
- (void)controlChannel:(id)arg1 receivedData:(id)arg2 transactionID:(unsigned int)arg3 fromParticipant:(id)arg4;	// IMP=0x00000000001bf2f9
- (void)setupWRMCoexMetricsMessage;	// IMP=0x00000000001bf132
- (void)setupWRMAlertStateUpdateMessage;	// IMP=0x00000000001beecd
- (void)setupSymptomEnabledMessage;	// IMP=0x00000000001bec43
- (void)processSymptomFromMessage:(id)arg1 participantID:(id)arg2 isLocalInitiated:(_Bool)arg3 isLocalSideOnly:(_Bool)arg4;	// IMP=0x00000000001be987
- (void)setupPreferredInterfaceMessage;	// IMP=0x00000000001be6ff
- (void)setupMomentsMessages;	// IMP=0x00000000001be4cd
- (void)setupCellTechChangeMessages;	// IMP=0x00000000001be28f
- (void)setupPiPStateChangeMessage;	// IMP=0x00000000001be07f
- (void)setupHandoverCandidateChangeMessage;	// IMP=0x00000000001bde27
- (void)setupDisconnectMessage;	// IMP=0x00000000001bdc25
- (void)setupBasebandCodecInfoMessages;	// IMP=0x00000000001bd8fd
- (void)setupCallingModeMessages;	// IMP=0x00000000001bd679
- (void)setupAudioOnOffStateMessages;	// IMP=0x00000000001bd443
- (void)setupAudioPausedHBMessages;	// IMP=0x00000000001bd288
- (void)setupVideoPauseMessages;	// IMP=0x00000000001bd0b4
- (void)setupAudioPauseMessages;	// IMP=0x00000000001bcee3
- (void)setupMessaging;	// IMP=0x00000000001bcd5e
- (void)transportSession:(id)arg1 sendRelayResponse:(id)arg2;	// IMP=0x00000000001bf7bf
- (void)transportSession:(id)arg1 initiateRelayRequest:(id)arg2;	// IMP=0x00000000001bf712
- (void)transportSession:(id)arg1 cancelRelayRequest:(id)arg2;	// IMP=0x00000000001bf67f
- (void)transportSession:(id)arg1 connectionSetupDataDidChange:(id)arg2;	// IMP=0x00000000001bf499
- (int)learntBitrateForSegment:(id)arg1 defaultValue:(int)arg2;	// IMP=0x00000000001bf9b3
- (void)rateController:(id)arg1 targetBitrateDidChange:(unsigned int)arg2 rateChangeCounter:(unsigned int)arg3;	// IMP=0x00000000001bf852
- (void)mediaController:(void *)arg1 mediaSuggestionDidChange:(struct VCRateControlMediaSuggestion)arg2;	// IMP=0x00000000001bf9c9
- (void)packMeters:(char *)arg1 withLength:(char *)arg2;	// IMP=0x00000000001bfc90
- (void)updateStatistics:(CDStruct_7df19fcb)arg1;	// IMP=0x00000000003de9ef
- (void)callAlarmsWithRTPTimeStamp:(CDStruct_1b6d18a9 *)arg1;	// IMP=0x00000000003de9e9
- (void)processResolutionChangeToVideoRule:(id)arg1 captureRule:(id)arg2 featureListString:(id)arg3;	// IMP=0x00000000003de9e3
- (id)newRemoteScreenAttributesForOrientation:(int)arg1;	// IMP=0x00000000003de9d2
- (void)updateVideoQualityNotification:(double)arg1;	// IMP=0x00000000003de9cc
- (double)sessionReceivingBitrate;	// IMP=0x00000000003de9c3
- (double)sessionReceivingFramerate;	// IMP=0x00000000003de9ba
- (double)sessionTransmittingBitrate;	// IMP=0x00000000003de9b1
- (double)sessionTransmittingFramerate;	// IMP=0x00000000003de9a8
- (_Bool)initializeVideoReceiver:(id *)arg1 reportingAgent:(struct opaqueRTCReporting *)arg2 fecHeaderV1Enabled:(_Bool)arg3 videoJBEnabled:(_Bool)arg4;	// IMP=0x00000000003de9a0
- (_Bool)initializeVideoTransmitter:(id *)arg1 videoRules:(struct VCCSVideoTransmitterVideoRules_t *)arg2 unpausing:(_Bool)arg3 reportingAgent:(struct opaqueRTCReporting *)arg4 fecHeaderV1Enabled:(_Bool)arg5 isFECGeneratorEnabled:(_Bool)arg6;	// IMP=0x00000000003de998
- (void)cleanUpDisplayLink;	// IMP=0x00000000003de95c
- (void)cleanUpVideoTransmitter;	// IMP=0x00000000003de956
- (void)cleanUpVideoReceiver;	// IMP=0x00000000003de950
- (void)cleanUpVideoRTP;	// IMP=0x00000000003de916
- (struct CGSize)computeVisibleAspectRatioWithRemoteScreenAspectRatio:(struct CGSize)arg1 remoteExpectedAspectRatio:(struct CGSize)arg2 encodeWidth:(int)arg3 encodeHeight:(int)arg4;	// IMP=0x00000000003de4ee
- (unsigned int)parameterSetForPayload:(int)arg1;	// IMP=0x00000000003de42f
- (void)nofityDelegateReceivedRemoteFrame:(struct __CVBuffer *)arg1 frameTime:(CDStruct_1b6d18a9)arg2 cameraStatusBits:(unsigned char)arg3 newRemoteVideoAttributes:(id)arg4 remoteScreenAttributes:(id)arg5;	// IMP=0x00000000003de429
- (void)onPlayVideo:(struct __CVBuffer *)arg1 frameTime:(CDStruct_1b6d18a9)arg2 cameraStatusBits:(unsigned char)arg3;	// IMP=0x00000000003de41d
- (_Bool)onCaptureFrame:(struct opaqueCMSampleBuffer *)arg1 audioTS:(unsigned int)arg2 audioHT:(double)arg3 videoHT:(CDStruct_1b6d18a9)arg4 cameraBits:(unsigned char)arg5;	// IMP=0x00000000003de401
- (void)processBlackFrame:(struct opaqueCMSampleBuffer *)arg1;	// IMP=0x00000000003de28c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

