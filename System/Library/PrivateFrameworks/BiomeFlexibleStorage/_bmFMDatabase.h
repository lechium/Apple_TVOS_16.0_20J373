//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSDateFormatter, NSMutableDictionary, NSMutableSet, NSString, NSURL;

__attribute__((visibility("hidden")))
@interface _bmFMDatabase : NSObject
{
    void *_db;	// 8 = 0x8
    _Bool _isExecutingStatement;	// 16 = 0x10
    double _startBusyRetryTime;	// 24 = 0x18
    NSMutableSet *_openResultSets;	// 32 = 0x20
    NSMutableSet *_openFunctions;	// 40 = 0x28
    NSDateFormatter *_dateFormat;	// 48 = 0x30
    _Bool _shouldCacheStatements;	// 56 = 0x38
    _Bool _traceExecution;	// 57 = 0x39
    _Bool _checkedOut;	// 58 = 0x3a
    _Bool _crashOnErrors;	// 59 = 0x3b
    _Bool _logsErrors;	// 60 = 0x3c
    _Bool _isOpen;	// 61 = 0x3d
    _Bool _isInTransaction;	// 62 = 0x3e
    double _maxBusyRetryTimeInterval;	// 64 = 0x40
    NSMutableDictionary *_cachedStatements;	// 72 = 0x48
    NSString *_databasePath;	// 80 = 0x50
}

+ (id)storeableDateFormat:(id)arg1;	// IMP=0x006000000000af40
+ (_Bool)isSQLiteThreadSafe;	// IMP=0x006000000000a2cb
+ (id)sqliteLibVersion;	// IMP=0x006000000000a287
+ (int)FMDBVersion;	// IMP=0x006000000000a076
+ (id)FMDBUserVersion;	// IMP=0x006000000000a069
+ (id)databaseWithURL:(id)arg1;	// IMP=0x0060000000009e7d
+ (id)databaseWithPath:(id)arg1;	// IMP=0x0060000000009e34
- (void).cxx_destruct;	// IMP=0x000000000000e085
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(readonly, nonatomic) _Bool isInTransaction; // @synthesize isInTransaction=_isInTransaction;
@property(nonatomic) _Bool isOpen; // @synthesize isOpen=_isOpen;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
@property _Bool logsErrors; // @synthesize logsErrors=_logsErrors;
@property _Bool crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
@property _Bool checkedOut; // @synthesize checkedOut=_checkedOut;
@property _Bool traceExecution; // @synthesize traceExecution=_traceExecution;
- (void)resultErrorTooBigInContext:(void *)arg1;	// IMP=0x000000000000dfe0
- (void)resultErrorNoMemoryInContext:(void *)arg1;	// IMP=0x000000000000dfd3
- (void)resultErrorCode:(int)arg1 context:(void *)arg2;	// IMP=0x000000000000dfc4
- (void)resultError:(id)arg1 context:(void *)arg2;	// IMP=0x000000000000df8d
- (void)resultString:(id)arg1 context:(void *)arg2;	// IMP=0x000000000000df4f
- (void)resultData:(id)arg1 context:(void *)arg2;	// IMP=0x000000000000dee5
- (void)resultDouble:(double)arg1 context:(void *)arg2;	// IMP=0x000000000000ded8
- (void)resultLong:(long long)arg1 context:(void *)arg2;	// IMP=0x000000000000dec8
- (void)resultInt:(int)arg1 context:(void *)arg2;	// IMP=0x000000000000deb9
- (void)resultNullInContext:(void *)arg1;	// IMP=0x000000000000deac
- (id)valueString:(void *)arg1;	// IMP=0x000000000000de6e
- (id)valueData:(void *)arg1;	// IMP=0x000000000000de19
- (double)valueDouble:(void *)arg1;	// IMP=0x000000000000de0c
- (long long)valueLong:(void *)arg1;	// IMP=0x000000000000ddff
- (int)valueInt:(void *)arg1;	// IMP=0x000000000000ddf2
- (int)valueType:(void *)arg1;	// IMP=0x000000000000dde5
- (void)makeFunctionNamed:(id)arg1 arguments:(int)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x000000000000dcef
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x000000000000dcdd
@property(nonatomic) _Bool shouldCacheStatements; // @synthesize shouldCacheStatements=_shouldCacheStatements;
- (_Bool)checkpoint:(int)arg1 name:(id)arg2 logFrameCount:(int *)arg3 checkpointCount:(int *)arg4 error:(id *)arg5;	// IMP=0x000000000000dad7
- (_Bool)checkpoint:(int)arg1 name:(id)arg2 error:(id *)arg3;	// IMP=0x000000000000dab2
- (_Bool)checkpoint:(int)arg1 error:(id *)arg2;	// IMP=0x000000000000da8b
- (id)inSavePoint:(CDUnknownBlockType)arg1;	// IMP=0x000000000000d925
- (_Bool)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x000000000000d7e2
- (_Bool)releaseSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x000000000000d69f
- (_Bool)startSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x000000000000d55c
- (_Bool)interrupt;	// IMP=0x000000000000d52b
- (_Bool)inTransaction;	// IMP=0x000000000000d522
- (_Bool)beginExclusiveTransaction;	// IMP=0x000000000000d4f4
- (_Bool)beginImmediateTransaction;	// IMP=0x000000000000d4c6
- (_Bool)beginDeferredTransaction;	// IMP=0x000000000000d498
- (_Bool)beginTransaction;	// IMP=0x000000000000d46a
- (_Bool)commit;	// IMP=0x000000000000d43c
- (_Bool)rollback;	// IMP=0x000000000000d40e
- (id)prepare:(id)arg1;	// IMP=0x000000000000d3e4
- (_Bool)update:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x000000000000d340
- (_Bool)executeUpdate:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x000000000000d29c
- (_Bool)executeStatements:(id)arg1 withResultBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000000000d1a4
- (_Bool)executeStatements:(id)arg1;	// IMP=0x000000000000d190
- (_Bool)executeUpdateWithFormat:(id)arg1;	// IMP=0x000000000000ce95
- (_Bool)executeUpdate:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;	// IMP=0x000000000000ce6e
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x000000000000ce43
- (_Bool)executeUpdate:(id)arg1 values:(id)arg2 error:(id *)arg3;	// IMP=0x000000000000ce14
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x000000000000cde9
- (_Bool)executeUpdate:(id)arg1;	// IMP=0x000000000000cd3f
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(struct __va_list_tag [1])arg5;	// IMP=0x000000000000cca0
- (id)executeQuery:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;	// IMP=0x000000000000cc76
- (id)executeQuery:(id)arg1 values:(id)arg2 error:(id *)arg3;	// IMP=0x000000000000cc02
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x000000000000cbda
- (id)executeQueryWithFormat:(id)arg1;	// IMP=0x000000000000ca61
- (id)executeQuery:(id)arg1;	// IMP=0x000000000000c9a8
- (_Bool)bindStatement:(struct sqlite3_stmt *)arg1 WithArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(struct __va_list_tag [1])arg4;	// IMP=0x000000000000c414
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(struct __va_list_tag [1])arg4 shouldBind:(_Bool)arg5;	// IMP=0x000000000000c0a2
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x000000000000c078
- (void)extractSQL:(id)arg1 argumentsList:(struct __va_list_tag [1])arg2 intoString:(id)arg3 arguments:(id)arg4;	// IMP=0x000000000000b85e
- (int)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;	// IMP=0x000000000000b2f8
@property(readonly, nonatomic) int changes;
@property(readonly, nonatomic) long long lastInsertRowId;
- (id)lastError;	// IMP=0x000000000000b223
- (id)errorWithMessage:(id)arg1;	// IMP=0x000000000000b19c
- (int)lastExtendedErrorCode;	// IMP=0x000000000000b18e
- (int)lastErrorCode;	// IMP=0x000000000000b180
- (_Bool)hadError;	// IMP=0x000000000000b165
- (id)lastErrorMessage;	// IMP=0x000000000000b136
- (_Bool)databaseExists;	// IMP=0x000000000000b0ec
- (void)warnInUse;	// IMP=0x000000000000b0b5
@property(readonly, nonatomic) _Bool goodConnection;
- (id)stringFromDate:(id)arg1;	// IMP=0x000000000000b03f
- (id)dateFromString:(id)arg1;	// IMP=0x000000000000b029
- (void)setDateFormat:(id)arg1;	// IMP=0x000000000000b018
- (_Bool)hasDateFormatter;	// IMP=0x000000000000b00a
- (_Bool)setKeyWithData:(id)arg1;	// IMP=0x000000000000af38
- (_Bool)setKey:(id)arg1;	// IMP=0x000000000000ae73
- (_Bool)rekeyWithData:(id)arg1;	// IMP=0x000000000000ae6b
- (_Bool)rekey:(id)arg1;	// IMP=0x000000000000ada6
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;	// IMP=0x000000000000ac38
- (id)cachedStatementForQuery:(id)arg1;	// IMP=0x000000000000ab8f
- (void)clearCachedStatements;	// IMP=0x000000000000a930
- (void)resultSetDidClose:(id)arg1;	// IMP=0x000000000000a8dc
- (void)closeOpenResultSets;	// IMP=0x000000000000a6fe
@property(readonly, nonatomic) _Bool hasOpenResultSets;
- (void)setBusyRetryTimeout:(int)arg1;	// IMP=0x000000000000a6b3
- (int)busyRetryTimeout;	// IMP=0x000000000000a680
@property(nonatomic) double maxBusyRetryTimeInterval; // @synthesize maxBusyRetryTimeInterval=_maxBusyRetryTimeInterval;
- (_Bool)close;	// IMP=0x000000000000a4d3
- (_Bool)openWithFlags:(int)arg1 vfs:(id)arg2;	// IMP=0x000000000000a3f3
- (_Bool)openWithFlags:(int)arg1;	// IMP=0x000000000000a3df
- (_Bool)open;	// IMP=0x000000000000a349
- (int)limitFor:(int)arg1 value:(int)arg2;	// IMP=0x000000000000a337
- (const char *)sqlitePath;	// IMP=0x000000000000a2e5
@property(readonly, nonatomic) void *sqliteHandle;
@property(readonly, nonatomic) NSURL *databaseURL;
- (void)dealloc;	// IMP=0x0000000000009ff4
- (id)initWithPath:(id)arg1;	// IMP=0x0000000000009f30
- (id)initWithURL:(id)arg1;	// IMP=0x0000000000009eda
- (id)init;	// IMP=0x0000000000009ec6
- (_Bool)validateSQL:(id)arg1 error:(id *)arg2;	// IMP=0x000000000000f129
- (_Bool)columnExists:(id)arg1 columnName:(id)arg2;	// IMP=0x000000000000f10e
@property(nonatomic) unsigned int userVersion;
@property(nonatomic) unsigned int applicationID;
- (_Bool)columnExists:(id)arg1 inTableWithName:(id)arg2;	// IMP=0x000000000000edaa
- (id)getTableSchema:(id)arg1;	// IMP=0x000000000000ed15
- (id)getSchema;	// IMP=0x000000000000ecfa
- (_Bool)tableExists:(id)arg1;	// IMP=0x000000000000ec6d
- (id)dateForQuery:(id)arg1;	// IMP=0x000000000000eb4a
- (id)dataForQuery:(id)arg1;	// IMP=0x000000000000ea27
- (double)doubleForQuery:(id)arg1;	// IMP=0x000000000000e90b
- (_Bool)boolForQuery:(id)arg1;	// IMP=0x000000000000e7f4
- (long long)longForQuery:(id)arg1;	// IMP=0x000000000000e6dd
- (int)intForQuery:(id)arg1;	// IMP=0x000000000000e5c6
- (id)stringForQuery:(id)arg1;	// IMP=0x000000000000e4a3

@end

