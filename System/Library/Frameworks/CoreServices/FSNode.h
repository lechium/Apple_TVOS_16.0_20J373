//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSURL;

__attribute__((visibility("hidden")))
@interface FSNode : NSObject
{
    NSURL *_url;	// 8 = 0x8
    unsigned long long _cacheExpiration;	// 16 = 0x10
    unsigned int _isDirectory:2;	// 24 = 0x18
    unsigned int _hasReferringAliasNode:1;	// 24 = 0x18
    unsigned int _canUseFileCache:1;	// 24 = 0x18
    unsigned int _isInitialized:1;	// 24 = 0x18
}

+ (_Bool)supportsSecureCoding;	// IMP=0x001000000000ef57
+ (id)_resolvedNodeFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x0010000000010814
+ (id)_resolvedURLFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x00100000000106ad
+ (id)systemDataVolumeNode;	// IMP=0x00100000000118fb
+ (id)prebootVolumeNode;	// IMP=0x001000000001182d
+ (id)rootVolumeNode;	// IMP=0x001000000001175f
+ (_Bool)canReadMetadataOfURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000013118
+ (_Bool)canWriteURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x00100000000130ff
+ (_Bool)canReadURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x00100000000130e6
+ (_Bool)canReadMetadataOfURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000012ee2
+ (_Bool)canWriteURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000012ec9
+ (_Bool)canReadURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000012eb0
+ (_Bool)canAccessURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2 operation:(const char *)arg3;	// IMP=0x0010000000012cb8
+ (_Bool)canAccessURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2 operation:(const char *)arg3;	// IMP=0x0010000000012b9d
+ (_Bool)getFileSystemRepresentation:(char [1024])arg1 forBookmarkData:(id)arg2;	// IMP=0x0010000000014741
+ (_Bool)isBookmarkDataFull:(id)arg1;	// IMP=0x00100000000146b9
+ (_Bool)getVolumeIdentifier:(unsigned long long *)arg1 forBookmarkData:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000014631
+ (id)nameForBookmarkData:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000144a7
+ (id)pathForBookmarkData:(id)arg1 error:(id *)arg2;	// IMP=0x001000000001428c
+ (unsigned char)compareBookmarkData:(id)arg1 toBookmarkData:(id)arg2;	// IMP=0x001000000001403c
+ (id)injectSimulatorRootIntoBookmarkData:(id)arg1;	// IMP=0x0010000000013c2a
+ (id)removeSimulatorRootFromBookmarkData:(id)arg1;	// IMP=0x0010000000013a96
+ (id)simulatorRootPath;	// IMP=0x0010000000013953
- (void).cxx_destruct;	// IMP=0x000000000000ef5f
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000000ed46
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000000ec7e
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000000ea68
- (id)redactedDescription;	// IMP=0x000000000000ea13
- (id)description;	// IMP=0x000000000000e92f
- (unsigned long long)hash;	// IMP=0x000000000000e8b9
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000000e6d5
- (void)prepareForReuse;	// IMP=0x000000000000e60e
- (id)initWithURL:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000e0cf
- (id)initTemporaryNodeOnVolume:(id)arg1 flags:(unsigned int)arg2 fileDescriptor:(int *)arg3 error:(id *)arg4;	// IMP=0x000000000000f627
- (id)initWithConfigurationString:(int)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000f546
- (id)initWithDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 lastPathComponent:(id)arg3 createIntermediateDirectories:(_Bool)arg4 flags:(unsigned int)arg5 error:(id *)arg6;	// IMP=0x000000000000f268
- (id)initWithFileSystemRepresentation:(const char *)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000f0ea
- (id)initWithPath:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000ef6f
- (_Bool)checkResourceIsReachableAndReturnError:(id *)arg1;	// IMP=0x0000000000010258
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000000101eb
- (_Bool)getTemporaryResourceValue:(id *)arg1 forKey:(id)arg2;	// IMP=0x00000000000101d3
- (void)removeCachedResourceValueForKey:(id)arg1;	// IMP=0x000000000001017b
- (_Bool)setResourceValue:(id)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id *)arg4;	// IMP=0x000000000000ffd6
- (_Bool)getResourceValue:(id *)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id *)arg4;	// IMP=0x000000000000fc6a
- (void)clearURLPropertyCacheIfStale;	// IMP=0x000000000000fbcb
@property(readonly, nonatomic) NSURL *URL;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x0000000000010ade
- (id)resolvedNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x00000000000109ea
- (void)setReferringAliasNode:(id)arg1;	// IMP=0x000000000001066e
@property(readonly, nonatomic) FSNode *referringAliasNode;
- (id)diskImageURLWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x00000000000105ee
- (id)volumeNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x0000000000010551
- (id)childNodeWithRelativePath:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x0000000000010281
@property(readonly, nonatomic) _Bool hasHiddenExtension;
@property(readonly, nonatomic, getter=isHidden) _Bool hidden;
@property(readonly, nonatomic, getter=isRegularFile) _Bool regularFile;
@property(readonly, nonatomic) _Bool hasPackageBit;
@property(readonly, nonatomic, getter=isAliasFile) _Bool aliasFile;
@property(readonly, nonatomic, getter=isSymbolicLink) _Bool symbolicLink;
@property(readonly, nonatomic, getter=isResolvable) _Bool resolvable;
@property(readonly, nonatomic, getter=isExecutable) _Bool executable;
@property(readonly, nonatomic, getter=isBusyDirectory) _Bool busyDirectory;
@property(readonly, nonatomic, getter=isDirectory) _Bool directory;
- (_Bool)getIsDirectory_NoIO:(_Bool *)arg1;	// IMP=0x0000000000010bda
- (id)extensionWithError:(id *)arg1;	// IMP=0x0000000000011563
- (id)nameWithError:(id *)arg1;	// IMP=0x000000000001141b
- (id)canonicalPathWithError:(id *)arg1;	// IMP=0x0000000000011401
- (id)pathWithError:(id *)arg1;	// IMP=0x00000000000113ea
- (_Bool)getFileSystemRepresentation:(char [1024])arg1 error:(id *)arg2;	// IMP=0x0000000000011334
- (id)canonical:(_Bool)arg1 pathWithError:(id *)arg2;	// IMP=0x000000000001116a
@property(readonly, nonatomic, getter=isOnLocalVolume) _Bool onLocalVolume;
@property(readonly, nonatomic, getter=isOnDiskImage) _Bool onDiskImage;
- (_Bool)getVolumeIdentifier:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011a3e
@property(readonly, nonatomic, getter=isMountTrigger) _Bool mountTrigger;
@property(readonly, nonatomic, getter=isVolume) _Bool volume;
- (_Bool)getOwnerUID:(unsigned int *)arg1 error:(id *)arg2;	// IMP=0x0000000000011c88
- (_Bool)getFileIdentifier:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011c03
- (_Bool)getInodeNumber:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011b7e
- (_Bool)getDeviceNumber:(int *)arg1 error:(id *)arg2;	// IMP=0x0000000000011af9
- (id)bundleIdentifierWithContext:(struct LSContext *)arg1 error:(id *)arg2;	// IMP=0x0000000000011f9f
- (id)bundleIdentifierWithError:(id *)arg1;	// IMP=0x0000000000011f88
- (id)bundleInfoDictionaryWithError:(id *)arg1;	// IMP=0x0000000000011e43
- (struct __CFBundle *)copyCFBundleWithError:(id *)arg1;	// IMP=0x0000000000011d0d
- (_Bool)getWriterBundleIdentifier:(id *)arg1 error:(id *)arg2;	// IMP=0x0000000000012858
- (_Bool)getHFSType:(unsigned int *)arg1 creator:(unsigned int *)arg2 error:(id *)arg3;	// IMP=0x0000000000012552
- (_Bool)getLength:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x00000000000124cd
- (_Bool)getContentModificationDate:(double *)arg1 error:(id *)arg2;	// IMP=0x00000000000124b9
- (_Bool)getCreationDate:(double *)arg1 error:(id *)arg2;	// IMP=0x000000000001225b
- (_Bool)setFinderInfo:(const CDUnion_739f5cf2 *)arg1 error:(id *)arg2;	// IMP=0x00000000000129ff
- (_Bool)getFinderInfo:(CDUnion_739f5cf2 *)arg1 error:(id *)arg2;	// IMP=0x00000000000128a7
- (_Bool)canReadMetadataFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x000000000001306f
- (_Bool)canWriteFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012ff8
- (_Bool)canReadFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012f81
- (_Bool)canReadMetadataWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012e39
- (_Bool)canWriteWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012dc2
- (_Bool)canReadWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012d4b
- (_Bool)setExtendedAttribute:(id)arg1 name:(id)arg2 options:(int)arg3 error:(id *)arg4;	// IMP=0x0000000000013674
- (id)extendedAttributeWithName:(id)arg1 options:(int)arg2 error:(id *)arg3;	// IMP=0x00000000000131b7
- (id)initByResolvingBookmarkData:(id)arg1 relativeToNode:(id)arg2 bookmarkDataIsStale:(_Bool *)arg3 error:(id *)arg4;	// IMP=0x000000000001425f
- (id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToNode:(id)arg3 bookmarkDataIsStale:(_Bool *)arg4 error:(id *)arg5;	// IMP=0x000000000001405a
- (id)bookmarkDataWithOptions:(unsigned long long)arg1 relativeToNode:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000013dac
- (id)bookmarkDataRelativeToNode:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000013d8f

@end

