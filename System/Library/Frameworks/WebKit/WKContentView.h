//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NSArray, NSDictionary, NSIndexSet, NSString, NSUndoManager, RTIInputSystemSourceSession, UIColor, UIGestureRecognizer, UIImage, UIInputContextHistory, UITextInputAssistantItem, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, UIWKTextInteractionAssistant, UIWebFormAccessory, UIWebTouchEventsGestureRecognizer, WKBrowsingContextController, WKDateTimeInputControl, WKFormSelectControl, _UISupplementalLexicon;
@protocol UITextInputDelegate, UITextInputSuggestionDelegate, UITextInputTokenizer, WKFormControl;

__attribute__((visibility("hidden")))
@interface WKContentView
{
    struct RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> _page;	// 8 = 0x8
    struct WeakObjCPtr<WKWebView> _webView;	// 16 = 0x10
    struct RetainPtr<WKDeferringGestureRecognizer> _touchStartDeferringGestureRecognizerForImmediatelyResettableGestures;	// 24 = 0x18
    struct RetainPtr<WKDeferringGestureRecognizer> _touchStartDeferringGestureRecognizerForDelayedResettableGestures;	// 32 = 0x20
    struct RetainPtr<WKDeferringGestureRecognizer> _touchStartDeferringGestureRecognizerForSyntheticTapGestures;	// 40 = 0x28
    struct RetainPtr<WKDeferringGestureRecognizer> _touchEndDeferringGestureRecognizerForImmediatelyResettableGestures;	// 48 = 0x30
    struct RetainPtr<WKDeferringGestureRecognizer> _touchEndDeferringGestureRecognizerForDelayedResettableGestures;	// 56 = 0x38
    struct RetainPtr<WKDeferringGestureRecognizer> _touchEndDeferringGestureRecognizerForSyntheticTapGestures;	// 64 = 0x40
    struct optional<WTF::HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>>> _failedTouchStartDeferringGestures;	// 72 = 0x48
    struct unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer, std::default_delete<WebKit::GestureRecognizerConsistencyEnforcer>> _gestureRecognizerConsistencyEnforcer;	// 88 = 0x58
    struct RetainPtr<UIWebTouchEventsGestureRecognizer> _touchEventGestureRecognizer;	// 96 = 0x60
    _Bool _touchEventsCanPreventNativeGestures;	// 104 = 0x68
    _Bool _preventsPanningInXAxis;	// 105 = 0x69
    _Bool _preventsPanningInYAxis;	// 106 = 0x6a
    struct RetainPtr<WKSyntheticTapGestureRecognizer> _singleTapGestureRecognizer;	// 112 = 0x70
    struct RetainPtr<WKHighlightLongPressGestureRecognizer> _highlightLongPressGestureRecognizer;	// 120 = 0x78
    struct RetainPtr<UILongPressGestureRecognizer> _longPressGestureRecognizer;	// 128 = 0x80
    struct RetainPtr<WKSyntheticTapGestureRecognizer> _doubleTapGestureRecognizer;	// 136 = 0x88
    struct RetainPtr<UITapGestureRecognizer> _nonBlockingDoubleTapGestureRecognizer;	// 144 = 0x90
    struct RetainPtr<UITapGestureRecognizer> _doubleTapGestureRecognizerForDoubleClick;	// 152 = 0x98
    struct RetainPtr<UITapGestureRecognizer> _twoFingerDoubleTapGestureRecognizer;	// 160 = 0xa0
    struct RetainPtr<UITapGestureRecognizer> _twoFingerSingleTapGestureRecognizer;	// 168 = 0xa8
    struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> _inspectorNodeSearchGestureRecognizer;	// 176 = 0xb0
    struct RetainPtr<WKTouchActionGestureRecognizer> _touchActionGestureRecognizer;	// 184 = 0xb8
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionLeftSwipeGestureRecognizer;	// 192 = 0xc0
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionRightSwipeGestureRecognizer;	// 200 = 0xc8
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionUpSwipeGestureRecognizer;	// 208 = 0xd0
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionDownSwipeGestureRecognizer;	// 216 = 0xd8
    struct RetainPtr<UIWKTextInteractionAssistant> _textInteractionAssistant;	// 224 = 0xe0
    struct OptionSet<WebKit::SuppressSelectionAssistantReason> _suppressSelectionAssistantReasons;	// 232 = 0xe8
    struct RetainPtr<UITextInputTraits> _traits;	// 240 = 0xf0
    struct RetainPtr<UIWebFormAccessory> _formAccessoryView;	// 248 = 0xf8
    struct RetainPtr<_UIHighlightView> _highlightView;	// 256 = 0x100
    struct RetainPtr<UIView> _interactionViewsContainerView;	// 264 = 0x108
    RetainPtr_f11d553d _contextMenuHintContainerView;	// 272 = 0x110
    struct WeakObjCPtr<UIScrollView> _scrollViewForTargetedPreview;	// 280 = 0x118
    struct CGPoint _scrollViewForTargetedPreviewInitialOffset;	// 288 = 0x120
    RetainPtr_f11d553d _dragPreviewContainerView;	// 304 = 0x130
    RetainPtr_f11d553d _dropPreviewContainerView;	// 312 = 0x138
    struct RetainPtr<NSString> _markedText;	// 320 = 0x140
    struct RetainPtr<WKActionSheetAssistant> _actionSheetAssistant;	// 328 = 0x148
    struct RetainPtr<WKAirPlayRoutePicker> _airPlayRoutePicker;	// 336 = 0x150
    struct RetainPtr<WKFormInputSession> _formInputSession;	// 344 = 0x158
    struct RetainPtr<WKFileUploadPanel> _fileUploadPanel;	// 352 = 0x160
    struct FrameInfoData _frameInfoForFileUploadPanel;	// 360 = 0x168
    struct RetainPtr<UIGestureRecognizer> _previewGestureRecognizer;	// 624 = 0x270
    struct RetainPtr<UIGestureRecognizer> _previewSecondaryGestureRecognizer;	// 632 = 0x278
    struct Vector<bool, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _focusStateStack;	// 640 = 0x280
    struct RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>> _textIndicator;	// 656 = 0x290
    struct RetainPtr<WebTextIndicatorLayer> _textIndicatorLayer;	// 664 = 0x298
    struct unique_ptr<WebKit::SmartMagnificationController, std::default_delete<WebKit::SmartMagnificationController>> _smartMagnificationController;	// 672 = 0x2a0
    struct WeakObjCPtr<id<UITextInputDelegate>> _inputDelegate;	// 680 = 0x2a8
    ObjectIdentifier_e7ec9792 _latestTapID;	// 688 = 0x2b0
    struct TapHighlightInformation _tapHighlightInformation;	// 696 = 0x2b8
    struct WebAutocorrectionContext _lastAutocorrectionContext;	// 760 = 0x2f8
    struct WKAutoCorrectionData _autocorrectionData;	// 808 = 0x328
    // Error: parsing type: '{InteractionInformationAtPosition="request"{InteractionInformationRequest="point"{IntPoint="m_x"i"m_y"i}"includeSnapshot"B"includeLinkIndicator"B"includeCaretContext"B"includeHasDoubleClickHandler"B"includeImageData"B"linkIndicatorShouldHaveLegacyMargins"B"disallowUserAgentShadowContent"B}"canBeValid"B"nodeAtPositionHasDoubleClickHandler"{optional<bool>=""(?="__null_state_"c"__val_"B)"__engaged_"B}"selectability"C"isSelected"B"prefersDraggingOverTextSelection"B"isNearMarkedText"B"touchCalloutEnabled"B"isLink"B"isImage"B"isAttachment"B"isAnimatedImage"B"isPausedVideo"B"isElement"B"isContentEditable"B"containerScrollingNodeID"Q"preventTextInteraction"B"elementContainsImageOverlay"B"shouldNotUseIBeamInEditableContent"B"isImageOverlayText"B"isVerticalWritingMode"B"adjustedPointForNodeRespondingToClickEvents"{FloatPoint="m_x"f"m_y"f}"url"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"imageURL"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"imageMIMEType"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"title"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"idAttribute"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"bounds"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"image"{RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>>="m_ptr"^{ShareableBitmap}}"textBefore"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"textAfter"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"caretLength"f"lineCaretExtent"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"cursor"{optional<WebCore::Cursor>=""(?="__null_state_"c"__val_"{Cursor="m_type"i"m_image"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"m_hotSpot"{IntPoint="m_x"i"m_y"i}"m_platformCursor"^v})"__engaged_"B}"linkIndicator"{TextIndicatorData="selectionRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"textBoundingRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"contentImageWithoutSelectionRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"textRectsInBoundingRectCoordinates"{Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{FloatRect}"m_capacity"I"m_size"I}"contentImageScaleFactor"f"contentImageWithHighlight"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"contentImageWithoutSelection"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"contentImage"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"estimatedBackgroundColor"{Color="m_colorAndFlags"Q}"presentationTransition"C"options"{OptionSet<WebCore::TextIndicatorOption>="m_storage"S}}"elementContext"{optional<WebCore::ElementContext>=""(?="__null_state_"c"__val_"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}})"__engaged_"B}"hostImageOrVideoElementContext"{optional<WebCore::ElementContext>=""(?="__null_state_"c"__val_"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}})"__engaged_"B}}', name: _positionInformation
    // Error: parsing type: '{FocusedElementInformation="interactionRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"elementContext"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}}"lastInteractionLocation"{IntPoint="m_x"i"m_y"i}"minimumScaleFactor"d"maximumScaleFactor"d"maximumScaleFactorIgnoringAlwaysScalable"d"nodeFontSize"d"hasNextNode"B"nextNodeRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"hasPreviousNode"B"previousNodeRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"isAutocorrect"B"isRTL"B"isMultiSelect"B"isReadOnly"B"allowsUserScaling"B"allowsUserScalingIgnoringAlwaysScalable"B"insideFixedPosition"B"autocapitalizeType"C"elementType"i"inputMode"C"enterKeyHint"C"formAction"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"selectOptions"{Vector<WebKit::OptionItem, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{OptionItem}"m_capacity"I"m_size"I}"selectedIndex"i"value"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"valueAsNumber"d"title"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"acceptsAutofilledLoginCredentials"B"isAutofillableUsernameField"B"representingPageURL"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"autofillFieldName"i"placeholder"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"label"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"ariaLabel"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"hasSuggestions"B"isFocusingWithDataListDropdown"B"colorValue"{Color="m_colorAndFlags"Q}"suggestedColors"{Vector<WebCore::Color, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{Color}"m_capacity"I"m_size"I}"shouldSynthesizeKeyEventsForEditing"B"isSpellCheckingEnabled"B"shouldAvoidResizingWhenInputViewBoundsChange"B"shouldAvoidScrollingWhenFocusedContentIsVisible"B"shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation"B"isFocusingWithValidationMessage"B"preventScroll"B"identifier"{MonotonicObjectIdentifier<WebKit::FocusedElementInformationIdentifierType>="m_identifier"Q}"containerScrollingNodeID"Q}', name: _focusedElementInformation
    struct RetainPtr<NSObject<WKFormPeripheral>> _inputPeripheral;	// 1840 = 0x730
    struct BlockPtr<void (WebEvent *, bool)> _keyWebEventHandler;	// 1848 = 0x738
    struct CGPoint _lastInteractionLocation;	// 1856 = 0x740
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> _layerTreeTransactionIdAtLastInteractionStart;	// 1872 = 0x750
    struct WKSelectionDrawingInfo _lastSelectionDrawingInfo;	// 1880 = 0x758
    struct RetainPtr<WKTextRange> _cachedSelectedTextRange;	// 1944 = 0x798
    struct optional<WebKit::InteractionInformationRequest> _lastOutstandingPositionInformationRequest;	// 1952 = 0x7a0
    unsigned long long _positionInformationCallbackDepth;	// 1976 = 0x7b8
    struct Vector<std::optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)>>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _pendingPositionInformationHandlers;	// 1984 = 0x7c0
    struct unique_ptr<WebKit::InputViewUpdateDeferrer, std::default_delete<WebKit::InputViewUpdateDeferrer>> _inputViewUpdateDeferrer;	// 2000 = 0x7d0
    struct RetainPtr<WKKeyboardScrollViewAnimator> _keyboardScrollingAnimator;	// 2008 = 0x7d8
    struct Vector<WTF::BlockPtr<void ()>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _actionsToPerformAfterEditorStateUpdate;	// 2016 = 0x7e0
    struct RetainPtr<UIView<WKFormControl>> _dataListTextSuggestionsInputView;	// 2032 = 0x7f0
    struct RetainPtr<NSArray<UITextSuggestion *>> _dataListTextSuggestions;	// 2040 = 0x7f8
    struct WeakObjCPtr<WKDataListSuggestionsControl> _dataListSuggestionsControl;	// 2048 = 0x800
    _Bool _isEditable;	// 2056 = 0x808
    _Bool _showingTextStyleOptions;	// 2057 = 0x809
    _Bool _hasValidPositionInformation;	// 2058 = 0x80a
    _Bool _isTapHighlightIDValid;	// 2059 = 0x80b
    _Bool _isTapHighlightFading;	// 2060 = 0x80c
    _Bool _potentialTapInProgress;	// 2061 = 0x80d
    _Bool _isDoubleTapPending;	// 2062 = 0x80e
    _Bool _longPressCanClick;	// 2063 = 0x80f
    _Bool _hasTapHighlightForPotentialTap;	// 2064 = 0x810
    _Bool _selectionNeedsUpdate;	// 2065 = 0x811
    _Bool _shouldRestoreSelection;	// 2066 = 0x812
    _Bool _usingGestureForSelection;	// 2067 = 0x813
    _Bool _inspectorNodeSearchEnabled;	// 2068 = 0x814
    _Bool _isChangingFocusUsingAccessoryTab;	// 2069 = 0x815
    _Bool _didAccessoryTabInitiateFocus;	// 2070 = 0x816
    _Bool _isExpectingFastSingleTapCommit;	// 2071 = 0x817
    _Bool _showDebugTapHighlightsForFastClicking;	// 2072 = 0x818
    _Bool _textInteractionDidChangeFocusedElement;	// 2073 = 0x819
    _Bool _treatAsContentEditableUntilNextEditorStateUpdate;	// 2074 = 0x81a
    _Bool _isWaitingOnPositionInformation;	// 2075 = 0x81b
    _Bool _isRequestingAutocorrectionContext;	// 2076 = 0x81c
    _Bool _autocorrectionContextNeedsUpdate;	// 2077 = 0x81d
    int _commitPotentialTapPointerId;	// 2080 = 0x820
    _Bool _keyboardDidRequestDismissal;	// 2084 = 0x824
    _Bool _candidateViewNeedsUpdate;	// 2085 = 0x825
    _Bool _seenHardwareKeyDownInNonEditableElement;	// 2086 = 0x826
    _Bool _becomingFirstResponder;	// 2087 = 0x827
    _Bool _resigningFirstResponder;	// 2088 = 0x828
    _Bool _needsDeferredEndScrollingSelectionUpdate;	// 2089 = 0x829
    _Bool _isChangingFocus;	// 2090 = 0x82a
    _Bool _isFocusingElementWithKeyboard;	// 2091 = 0x82b
    _Bool _isBlurringFocusedElement;	// 2092 = 0x82c
    _Bool _isRelinquishingFirstResponderToFocusedElement;	// 2093 = 0x82d
    _Bool _unsuppressSoftwareKeyboardAfterNextAutocorrectionContextUpdate;	// 2094 = 0x82e
    _Bool _isUnsuppressingSoftwareKeyboardUsingLastAutocorrectionContext;	// 2095 = 0x82f
    _Bool _waitingForKeyboardToStartAnimatingInAfterElementFocus;	// 2096 = 0x830
    _Bool _shouldZoomToFocusRectAfterShowingKeyboard;	// 2097 = 0x831
    _Bool _isHidingKeyboard;	// 2098 = 0x832
    _Bool _focusRequiresStrongPasswordAssistance;	// 2099 = 0x833
    _Bool _waitingForEditDragSnapshot;	// 2100 = 0x834
    long long _dropAnimationCount;	// 2104 = 0x838
    _Bool _hasSetUpInteractions;	// 2112 = 0x840
    unsigned long long _ignoreSelectionCommandFadeCount;	// 2120 = 0x848
    unsigned long long _activeTextInteractionCount;	// 2128 = 0x850
    long long _suppressNonEditableSingleTapTextInteractionCount;	// 2136 = 0x858
    struct CompletionHandler<void (WebCore::DOMPasteAccessResponse)> _domPasteRequestHandler;	// 2144 = 0x860
    struct optional<WebCore::DOMPasteAccessCategory> _domPasteRequestCategory;	// 2152 = 0x868
    struct BlockPtr<void (UIWKAutocorrectionContext *)> _pendingAutocorrectionContextHandler;	// 2160 = 0x870
    struct CompletionHandler<void ()> _pendingRunModalJavaScriptDialogCallback;	// 2168 = 0x878
    struct RetainPtr<NSDictionary> _additionalContextForStrongPasswordAssistance;	// 2176 = 0x880
    struct optional<int> _lastInsertedCharacterToOverrideCharacterBeforeSelection;	// 2184 = 0x888
    unsigned int _selectionChangeNestingLevel;	// 2192 = 0x890
    unsigned int _fullscreenVideoImageAnalysisRequestIdentifier;	// 2196 = 0x894
    struct unique_ptr<WebKit::PageClientImpl, std::default_delete<WebKit::PageClientImpl>> _pageClient;	// 2200 = 0x898
    struct RetainPtr<WKBrowsingContextController> _browsingContextController;	// 2208 = 0x8a0
    struct RetainPtr<UIView> _rootContentView;	// 2216 = 0x8a8
    struct RetainPtr<UIView> _fixedClippingView;	// 2224 = 0x8b0
    struct RetainPtr<WKInspectorIndicationView> _inspectorIndicationView;	// 2232 = 0x8b8
    struct RetainPtr<WKInspectorHighlightView> _inspectorHighlightView;	// 2240 = 0x8c0
    struct RetainPtr<_UILayerHostView> _visibilityPropagationViewForWebProcess;	// 2248 = 0x8c8
    struct RetainPtr<_UILayerHostView> _visibilityPropagationViewForGPUProcess;	// 2256 = 0x8d0
    struct HistoricalVelocityData _historicalKinematicData;	// 2264 = 0x8d8
    struct RetainPtr<NSUndoManager> _undoManager;	// 2352 = 0x930
    struct RetainPtr<WKQuirkyNSUndoManager> _quirkyUndoManager;	// 2360 = 0x938
    struct Lock _pendingBackgroundPrintFormattersLock;	// 2368 = 0x940
    struct RetainPtr<NSMutableSet> _pendingBackgroundPrintFormatters;	// 2376 = 0x948
    unsigned long long _pdfPrintCallbackID;	// 2384 = 0x950
    struct Vector<WTF::RetainPtr<NSURL>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _temporaryURLsToDeleteWhenDeallocated;	// 2392 = 0x958
    _Bool _sizeChangedSinceLastVisibleContentRectUpdate;	// 2408 = 0x968
}

- (id).cxx_construct;	// IMP=0x00000000007731f4
- (void).cxx_destruct;	// IMP=0x00000000007727be
@property(nonatomic) _Bool sizeChangedSinceLastVisibleContentRectUpdate; // @synthesize sizeChangedSinceLastVisibleContentRectUpdate=_sizeChangedSinceLastVisibleContentRectUpdate;
@property(readonly, nonatomic, getter=isResigningFirstResponder) _Bool resigningFirstResponder; // @synthesize resigningFirstResponder=_resigningFirstResponder;
- (void)_screenCapturedDidChange:(id)arg1;	// IMP=0x0000000000772745
- (void)_applicationWillEnterForeground:(id)arg1;	// IMP=0x000000000077270d
- (void)_applicationDidEnterBackground:(id)arg1;	// IMP=0x00000000007726d5
- (void)_applicationDidBecomeActive:(id)arg1;	// IMP=0x00000000007726a3
- (void)_applicationWillResignActive:(id)arg1;	// IMP=0x0000000000772671
- (double)_targetContentZoomScaleForRect:(const struct FloatRect *)arg1 currentScale:(double)arg2 fitEntireRect:(_Bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5;	// IMP=0x0000000000772614
- (double)_contentZoomScale;	// IMP=0x00000000007725f3
- (double)_initialScaleFactor;	// IMP=0x00000000007725d2
- (void)_zoomToInitialScaleWithOrigin:(struct CGPoint)arg1;	// IMP=0x0000000000772573
- (void)_zoomOutWithOrigin:(struct CGPoint)arg1;	// IMP=0x0000000000772514
- (_Bool)_zoomToRect:(struct CGRect)arg1 withOrigin:(struct CGPoint)arg2 fitEntireRect:(_Bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(double)arg6;	// IMP=0x0000000000772472
- (void)_zoomToFocusRect:(struct CGRect)arg1 selectionRect:(struct CGRect)arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(_Bool)arg6 forceScroll:(_Bool)arg7;	// IMP=0x00000000007723e3
- (_Bool)_scrollToRect:(struct CGRect)arg1 withOrigin:(struct CGPoint)arg2 minimumScrollDistance:(double)arg3;	// IMP=0x0000000000772361
- (void)_setAcceleratedCompositingRootView:(id)arg1;	// IMP=0x000000000077220f
- (void)_layerTreeCommitComplete;	// IMP=0x00000000007721ee
- (void)_didCommitLayerTree:(const void *)arg1;	// IMP=0x0000000000771f00
- (void)_gpuProcessDidCreateContextForVisibilityPropagation;	// IMP=0x0000000000771eee
- (void)_webProcessDidCreateContextForVisibilityPropagation;	// IMP=0x0000000000771edc
- (void)_didRelaunchProcess;	// IMP=0x0000000000771e94
- (void)_processWillSwap;	// IMP=0x0000000000771e82
- (void)_gpuProcessDidExit;	// IMP=0x0000000000771e70
- (void)_processDidExit;	// IMP=0x0000000000771e0a
- (unique_ptr_7306e13f)_createDrawingAreaProxy:(void *)arg1;	// IMP=0x0000000000771db1
- (void)_resetPrintingState;	// IMP=0x0000000000771bf2
- (void)_webViewDestroyed;	// IMP=0x0000000000771bdf
- (void)_accessibilityRegisterUIProcessTokens;	// IMP=0x00000000007719ec
- (void)_updateRemoteAccessibilityRegistration:(_Bool)arg1;	// IMP=0x00000000007719e6
- (void)_setAccessibilityWebProcessToken:(id)arg1;	// IMP=0x00000000007719d4
- (void)_updateForScreen:(id)arg1;	// IMP=0x000000000077197a
- (void)_windowDidMoveToScreenNotification:(id)arg1;	// IMP=0x0000000000771931
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;	// IMP=0x00000000007718b1
- (_Bool)canBecomeFocused;	// IMP=0x0000000000771820
@property(readonly, nonatomic) long long interfaceOrientation;
@property(readonly, nonatomic) NSUndoManager *undoManagerForWebView;
- (void)didZoomToScale:(double)arg1;	// IMP=0x000000000077173a
- (void)willStartZoomOrScroll;	// IMP=0x0000000000771728
- (void)didInterruptScrolling;	// IMP=0x0000000000771714
- (void)didFinishScrolling;	// IMP=0x0000000000771702
- (void)didUpdateVisibleRect:(struct CGRect)arg1 unobscuredRect:(struct CGRect)arg2 contentInsets:(struct UIEdgeInsets)arg3 unobscuredRectInScrollViewCoordinates:(struct CGRect)arg4 obscuredInsets:(struct UIEdgeInsets)arg5 unobscuredSafeAreaInsets:(struct UIEdgeInsets)arg6 inputViewBounds:(struct CGRect)arg7 scale:(double)arg8 minimumScale:(double)arg9 viewStability:(OptionSet_5ff1ced1)arg10 enclosedInScrollableAncestorView:(_Bool)arg11 sendEvenIfUnchanged:(_Bool)arg12;	// IMP=0x00000000007712d8
- (struct CGRect)_computeUnobscuredContentRectRespectingInputViewBounds:(struct CGRect)arg1 inputViewBounds:(struct CGRect)arg2;	// IMP=0x00000000007711c7
- (void)_didExitStableState;	// IMP=0x000000000077117e
- (void)updateFixedClippingView:(struct FloatRect)arg1;	// IMP=0x00000000007710a2
@property(nonatomic, getter=isShowingInspectorIndication) _Bool showingInspectorIndication;
- (void)_hideInspectorHighlight;	// IMP=0x0000000000770f44
- (void)_showInspectorHighlight:(const void *)arg1;	// IMP=0x0000000000770e72
@property(readonly, nonatomic) _Bool isFocusingElement;
- (struct OpaqueWKPage *)_pageRef;	// IMP=0x0000000000770e42
@property(readonly, nonatomic) WKBrowsingContextController *browsingContextController;
- (void)didMoveToWindow;	// IMP=0x0000000000770d72
- (void)willMoveToWindow:(id)arg1;	// IMP=0x0000000000770c9f
- (id)rootContentView;	// IMP=0x0000000000770c8e
- (id)webView;	// IMP=0x0000000000770c7d
@property(readonly, nonatomic) void *page;
- (void)_removeTemporaryDirectoriesWhenDeallocated:(void *)arg1;	// IMP=0x0000000000770bce
- (void)_removeTemporaryFilesIfNecessary;	// IMP=0x0000000000770ae0
- (void)dealloc;	// IMP=0x0000000000770a56
- (id)initWithFrame:(struct CGRect)arg1 processPool:(NakedRef_6f117943)arg2 configuration:(void *)arg3 webView:(id)arg4;	// IMP=0x000000000077097f
- (void)_removeVisibilityPropagationViewForGPUProcess;	// IMP=0x00000000007708c1
- (void)_removeVisibilityPropagationViewForWebProcess;	// IMP=0x0000000000770803
- (void)_setupVisibilityPropagationViewForGPUProcess;	// IMP=0x000000000077068e
- (void)_setupVisibilityPropagationViewForWebProcess;	// IMP=0x000000000077054a
- (id)_commonInitializationWithProcessPool:(void *)arg1 configuration:(void *)arg2;	// IMP=0x0000000000770052
- (void)_wk_requestDocumentForPrintFormatter:(id)arg1;	// IMP=0x0000000000773eef
- (void)_waitForDrawToPDFCallbackForPrintFormatterIfNeeded:(id)arg1;	// IMP=0x0000000000773cee
- (unsigned long long)_wk_pageCountForPrintFormatter:(id)arg1;	// IMP=0x000000000077382a
@property(readonly, nonatomic) _Bool _wk_printFormatterRequiresMainThread;
- (optional_6c9e3562)_frameIdentifierForPrintFormatter:(id)arg1;	// IMP=0x00000000007737bf
@property(readonly, nonatomic, getter=isImageBacked) _Bool imageBacked;
@property(readonly, nonatomic) _Bool _shouldAvoidSecurityHeuristicScoreUpdates;
- (void)cancelTextRecognitionForVideoInElementFullscreen;	// IMP=0x000000000078d0e8
- (void)beginTextRecognitionForVideoInElementFullscreen:(const void *)arg1 bounds:(struct FloatRect)arg2;	// IMP=0x000000000078d0e2
@property(readonly, nonatomic) _Bool isTextRecognitionInFullscreenVideoEnabled;
- (void)cancelTextRecognitionForFullscreenVideo:(id)arg1;	// IMP=0x000000000078d0d4
- (void)beginTextRecognitionForFullscreenVideo:(const void *)arg1 playerViewController:(id)arg2;	// IMP=0x000000000078d0ce
- (void)startFadeOut;	// IMP=0x000000000078cf79
- (void)teardownTextIndicatorLayer;	// IMP=0x000000000078cf38
- (void)setTextIndicatorAnimationProgress:(float)arg1;	// IMP=0x000000000078cf0b
- (void)clearTextIndicator:(unsigned char)arg1;	// IMP=0x000000000078ce33
- (void)setUpTextIndicator:(Ref_72f36232)arg1;	// IMP=0x000000000078cccc
- (void)_writePromisedAttachmentToPasteboard:(void *)arg1;	// IMP=0x000000000078ccc6
- (void)setContinuousSpellCheckingEnabled:(_Bool)arg1;	// IMP=0x000000000078cc7b
- (id)menuWithInlineAction:(id)arg1 image:(id)arg2 identifier:(id)arg3 handler:(void *)arg4;	// IMP=0x000000000078ca63
- (void)buildMenuForWebViewWithBuilder:(id)arg1;	// IMP=0x000000000078ca5d
- (_Bool)deferringGestureRecognizer:(id)arg1 shouldDeferOtherGestureRecognizer:(id)arg2;	// IMP=0x000000000078c7b4
- (void)deferringGestureRecognizer:(id)arg1 didEndTouchesWithEvent:(id)arg2;	// IMP=0x000000000078c6d2
- (void)deferringGestureRecognizer:(id)arg1 didTransitionToState:(long long)arg2;	// IMP=0x000000000078c6a0
- (_Bool)deferringGestureRecognizer:(id)arg1 willBeginTouchesWithEvent:(id)arg2;	// IMP=0x000000000078c652
- (void)_updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:(unsigned long long)arg1;	// IMP=0x000000000078c540
- (void)_updateFrameOfContainerForContextMenuHintPreviewsIfNeeded;	// IMP=0x000000000078c43d
- (void)_removeContainerForContextMenuHintPreviews;	// IMP=0x000000000078c3c4
- (id)containerForContextMenuHintPreviews;	// IMP=0x000000000078c289
- (void)_removeContainerForDragPreviews;	// IMP=0x000000000078c236
- (id)containerForDragPreviews;	// IMP=0x000000000078c19f
- (void)_removeContainerForDropPreviews;	// IMP=0x000000000078c14c
- (id)containerForDropPreviews;	// IMP=0x000000000078c0b5
- (RetainPtr_f11d553d)_createPreviewContainerWithLayerName:(id)arg1;	// IMP=0x000000000078bfde
- (unsigned char)_dataOwnerForPasteboard:(_Bool)arg1;	// IMP=0x000000000078bf4b
@property(readonly, nonatomic) _Bool _shouldUseLegacySelectPopoverDismissalBehavior;
@property(readonly, nonatomic) _Bool _shouldAvoidScrollingWhenFocusedContentIsVisible;
@property(readonly, nonatomic) _Bool _shouldAvoidResizingWhenInputViewBoundsChange;
@property(readonly, nonatomic) _Bool _shouldUseContextMenusForFormControls;
@property(readonly, nonatomic) _Bool _shouldUseContextMenus;
- (void)actionSheetAssistant:(id)arg1 getAlternateURLForImage:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000078bdb1
- (id)selectedTextForActionSheetAssistant:(id)arg1;	// IMP=0x000000000078bd9f
- (id)dataDetectionContextForActionSheetAssistant:(id)arg1 positionInformation:(const void *)arg2;	// IMP=0x000000000078bd8a
- (id)dataDetectionContextForPositionInformation:(const void *)arg1;	// IMP=0x000000000078bcee
- (void)actionSheetAssistantDidStopInteraction:(id)arg1;	// IMP=0x000000000078bcbc
- (void)actionSheetAssistant:(id)arg1 willStartInteractionWithElement:(id)arg2;	// IMP=0x000000000078bc70
- (RetainPtr_f649c0c3)actionSheetAssistant:(id)arg1 decideActionsForElement:(id)arg2 defaultActions:(RetainPtr_f649c0c3)arg3;	// IMP=0x000000000078bbf7
- (_Bool)actionSheetAssistant:(id)arg1 showCustomSheetForElement:(id)arg2;	// IMP=0x000000000078bb58
- (void)actionSheetAssistant:(id)arg1 shareElementWithImage:(id)arg2 rect:(struct CGRect)arg3;	// IMP=0x000000000078b7f3
- (void)actionSheetAssistant:(id)arg1 shareElementWithURL:(id)arg2 rect:(struct CGRect)arg3;	// IMP=0x000000000078b63f
- (void)actionSheetAssistant:(id)arg1 openElementAtLocation:(struct CGPoint)arg2;	// IMP=0x000000000078b62b
- (void)actionSheetAssistant:(id)arg1 performAction:(_Bool)arg2;	// IMP=0x000000000078b614
- (void)updatePositionInformationForActionSheetAssistant:(id)arg1;	// IMP=0x000000000078b59a
-     // Error parsing type: {optional<WebKit::InteractionInformationAtPosition>=(?=c{InteractionInformationAtPosition={InteractionInformationRequest={IntPoint=ii}BBBBBBB}B{optional<bool>=(?=cB)B}CBBBBBBBBBBBQBBBBB{FloatPoint=ff}{URL={String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}b1b1b1b3b26IIIIIII}{URL={String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}b1b1b1b3b26IIIIIII}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{IntRect={IntPoint=ii}{IntSize=ii}}{RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>>=^{ShareableBitmap}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}f{FloatRect={FloatPoint=ff}{FloatSize=ff}}{optional<WebCore::Cursor>=(?=c{Cursor=i{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{IntPoint=ii}^v})B}{TextIndicatorData={FloatRect={FloatPoint=ff}{FloatSize=ff}}{FloatRect={FloatPoint=ff}{FloatSize=ff}}{FloatRect={FloatPoint=ff}{FloatSize=ff}}{Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>=^{FloatRect}II}f{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{Color=Q}C{OptionSet<WebCore::TextIndicatorOption>=S}}{optional<WebCore::ElementContext>=(?=c{ElementContext={FloatRect={FloatPoint=ff}{FloatSize=ff}}{ObjectIdentifier<WebCore::PageIdentifierType>=Q}{ProcessQualified<WTF::UUID>={UUID=T}{ObjectIdentifier<WebCore::ProcessIdentifierType>=Q}}{ObjectIdentifier<WebCore::ElementIdentifierType>=Q}})B}{optional<WebCore::ElementContext>=(?=c{ElementContext={FloatRect={FloatPoint=ff}{FloatSize=ff}}{ObjectIdentifier<WebCore::PageIdentifierType>=Q}{ProcessQualified<WTF::UUID>={UUID=T}{ObjectIdentifier<WebCore::ProcessIdentifierType>=Q}}{ObjectIdentifier<WebCore::ElementIdentifierType>=Q}})B}})B}24@0:8@16, name: positionInformationForActionSheetAssistant:
- (_Bool)isAnyTouchOverActiveArea:(id)arg1;	// IMP=0x000000000078b4ed
- (_Bool)gestureRecognizer:(id)arg1 isInterruptingMomentumScrollingWithEvent:(id)arg2;	// IMP=0x000000000078b335
- (_Bool)gestureRecognizer:(id)arg1 shouldIgnoreWebTouchWithEvent:(id)arg2;	// IMP=0x000000000078b318
- (void)_preserveFocusWithToken:(id)arg1 destructively:(_Bool)arg2;	// IMP=0x000000000078b24a
- (void)stopRelinquishingFirstResponderToFocusedElement;	// IMP=0x000000000078b216
- (void)startRelinquishingFirstResponderToFocusedElement;	// IMP=0x000000000078b1e2
- (_Bool)_restoreFocusWithToken:(id)arg1;	// IMP=0x000000000078b19c
- (id)inputLabelText;	// IMP=0x000000000078b139
- (void)_showContactPicker:(const void *)arg1 completionHandler:(void *)arg2;	// IMP=0x000000000078b0cc
- (void)_showShareSheet:(const void *)arg1 inRect:(optional_8c184661)arg2 completionHandler:(void *)arg3;	// IMP=0x000000000078b0c6
- (_Bool)fileUploadPanelDestinationIsManaged:(id)arg1;	// IMP=0x000000000078afe2
- (void)fileUploadPanelDidDismiss:(id)arg1;	// IMP=0x000000000078af9f
- (void)_showRunOpenPanel:(struct OpenPanelParameters *)arg1 frameInfo:(const void *)arg2 resultListener:(struct WebOpenPanelResultListenerProxy *)arg3;	// IMP=0x000000000078ae39
- (void)_showPlaybackTargetPicker:(_Bool)arg1 fromRect:(const struct IntRect *)arg2 routeSharingPolicy:(unsigned char)arg3 routingContextUID:(id)arg4;	// IMP=0x000000000078ad8f
- (void)updateTextSuggestionsForInputDelegate;	// IMP=0x000000000078acfb
@property(retain, nonatomic) NSArray *dataListTextSuggestions;
@property(retain, nonatomic) UIView<WKFormControl> *dataListTextSuggestionsInputView;
- (void)_stopSuppressingSelectionAssistantForReason:(unsigned char)arg1;	// IMP=0x000000000078ab7c
- (void)_startSuppressingSelectionAssistantForReason:(unsigned char)arg1;	// IMP=0x000000000078ab4a
- (_Bool)_shouldSuppressSelectionCommands;	// IMP=0x000000000078ab36
- (_Bool)hasHiddenContentEditable;	// IMP=0x000000000078ab22
- (_Bool)supportsTextSelectionWithCharacterGranularity;	// IMP=0x000000000078ab1a
- (_Bool)shouldAllowHidingSelectionCommands;	// IMP=0x000000000078ab05
- (void)_updateChangedSelection:(_Bool)arg1;	// IMP=0x000000000078a3ad
- (void)_updateChangedSelection;	// IMP=0x000000000078a399
- (void)selectWordForReplacement;	// IMP=0x000000000078a29f
- (void)_selectionChanged;	// IMP=0x000000000078a0f9
- (void)_updateSelectionAssistantSuppressionState;	// IMP=0x0000000000789fec
- (void)_wheelChangedWithEvent:(id)arg1;	// IMP=0x0000000000789fbd
- (void)reloadContextViewForPresentedListViewController;	// IMP=0x0000000000789fb7
- (void)updateCurrentFocusedElementInformation:(void *)arg1;	// IMP=0x0000000000789e3b
- (void)_updateInitialWritingDirectionIfNecessary;	// IMP=0x0000000000789dba
- (void)_didUpdateEditorState;	// IMP=0x0000000000789cb3
- (void)doAfterEditorStateUpdateAfterFocusingElement:(CDUnknownBlockType)arg1;	// IMP=0x0000000000789bff
- (void)_requestDOMPasteAccessForCategory:(unsigned char)arg1 elementRect:(const struct IntRect *)arg2 originIdentifier:(const void *)arg3 completionHandler:(void *)arg4;	// IMP=0x00000000007897f2
- (void)_didUpdateInputMode:(unsigned char)arg1;	// IMP=0x0000000000789797
- (void)_hardwareKeyboardAvailabilityChanged;	// IMP=0x000000000078977a
@property(readonly, nonatomic) _Bool shouldIgnoreKeyboardWillHideNotification;
- (void)_updateInputContextAfterBlurringAndRefocusingElement;	// IMP=0x00000000007896c6
- (void)_elementDidBlur;	// IMP=0x00000000007893ce
- (void)_elementDidFocus:(const void *)arg1 userIsInteracting:(_Bool)arg2 blurPreviousNode:(_Bool)arg3 activityStateChanges:(OptionSet_05ce0fa5)arg4 userObject:(id)arg5;	// IMP=0x0000000000788547
- (_Bool)_shouldShowKeyboardForElementIgnoringInputMode:(const void *)arg1;	// IMP=0x0000000000788519
- (_Bool)_shouldShowKeyboardForElement:(const void *)arg1;	// IMP=0x00000000007884fa
- (void *)focusedSelectElementOptions;	// IMP=0x00000000007884e4
@property(readonly, nonatomic) const void *focusedElementInformation;
- (_Bool)_formControlRefreshEnabled;	// IMP=0x000000000078847d
- (void)_hideKeyboard;	// IMP=0x00000000007883d0
- (void)_showKeyboard;	// IMP=0x000000000078836b
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x000000000078833a
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0000000000788332
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x000000000078832a
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0000000000788322
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0000000000788257
- (_Bool)hasSelection;	// IMP=0x000000000078824f
- (id)fontForCaretSelection;	// IMP=0x00000000007881cd
- (id)textColorForCaretSelection;	// IMP=0x00000000007881b4
- (void)selectAll;	// IMP=0x00000000007881ae
- (_Bool)hasContent;	// IMP=0x0000000000788186
- (void)setMarkedText:(id)arg1;	// IMP=0x0000000000788180
- (id)wordRangeContainingCaretSelection;	// IMP=0x0000000000788178
- (id)wordContainingCaretSelection;	// IMP=0x0000000000788170
- (unsigned short)characterBeforeCaretSelection;	// IMP=0x0000000000788168
- (void)moveForward:(unsigned int)arg1;	// IMP=0x0000000000788162
- (void)moveBackward:(unsigned int)arg1;	// IMP=0x000000000078815c
- (id)metadataDictionariesForDictationResults;	// IMP=0x0000000000788154
@property(nonatomic) long long selectionGranularity;
- (id)automaticallySelectedOverlay;	// IMP=0x000000000078813a
- (void)setBottomBufferHeight:(double)arg1;	// IMP=0x0000000000788134
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000788108
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000007880dc
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x000000000078807a
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x000000000078804e
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000788022
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000787ff6
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000787f94
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000787f68
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000787f3c
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000787f10
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000787ee4
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000787eb8
- (void)_transpose;	// IMP=0x0000000000787e9f
- (void)_deleteToEndOfParagraph;	// IMP=0x0000000000787e86
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0000000000787e6d
- (void)_deleteToEndOfLine;	// IMP=0x0000000000787e54
- (void)_deleteToStartOfLine;	// IMP=0x0000000000787e3b
- (void)_deleteForwardByWord;	// IMP=0x0000000000787e22
- (void)_deleteByWord;	// IMP=0x0000000000787e09
- (void)executeEditCommandWithCallback:(id)arg1;	// IMP=0x0000000000787c91
- (void)keyboardScrollViewAnimatorDidFinishScrolling:(id)arg1;	// IMP=0x0000000000787c35
- (void)keyboardScrollViewAnimatorWillScroll:(id)arg1;	// IMP=0x0000000000787c23
- (double)keyboardScrollViewAnimator:(id)arg1 distanceForIncrement:(unsigned char)arg2 inDirection:(unsigned char)arg3;	// IMP=0x0000000000787a69
- (_Bool)isScrollableForKeyboardScrollViewAnimator:(id)arg1;	// IMP=0x0000000000787a04
- (void)dismissFilePicker;	// IMP=0x00000000007879e7
- (id)filePickerAcceptedTypeIdentifiers;	// IMP=0x00000000007879bc
- (_Bool)_interpretKeyEvent:(id)arg1 isCharEvent:(_Bool)arg2;	// IMP=0x00000000007877a4
- (void)_didHandleKeyEvent:(id)arg1 eventWasHandled:(_Bool)arg2;	// IMP=0x00000000007876f5
- (void)handleKeyWebEvent:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000787502
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x00000000007874a8
- (void)generateSyntheticEditingCommand:(unsigned char)arg1;	// IMP=0x0000000000787491
- (void)_handleKeyUIEvent:(id)arg1;	// IMP=0x00000000007873ad
- (_Bool)requiresKeyEvents;	// IMP=0x00000000007873a5
- (_Bool)shouldSuppressUpdateCandidateView;	// IMP=0x0000000000787395
- (void)modifierFlagsDidChangeFrom:(long long)arg1 to:(long long)arg2;	// IMP=0x0000000000787253
- (void)_didFinishTextInteractionInTextInputContext:(id)arg1;	// IMP=0x00000000007871c8
- (void)_willBeginTextInteractionInTextInputContext:(id)arg1;	// IMP=0x0000000000787144
- (void)_requestTextInputContextsInRect:(struct CGRect)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000787006
- (void)_focusTextInputContext:(id)arg1 placeCaretAt:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000786e04
- (_Bool)_isTextInputContextFocused:(id)arg1;	// IMP=0x0000000000786d8d
- (struct CGRect)rectContainingCaretSelection;	// IMP=0x0000000000786d6f
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x0000000000786d69
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(_Bool)arg2;	// IMP=0x0000000000786d63
- (id)selectedDOMRange;	// IMP=0x0000000000786d5b
- (struct _NSRange)_markedTextNSRange;	// IMP=0x0000000000786d49
- (struct CGRect)rectForNSRange:(struct _NSRange)arg1;	// IMP=0x0000000000786d2b
- (struct _NSRange)selectionRange;	// IMP=0x0000000000786d19
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (void)_updateTextInputTraits:(id)arg1;	// IMP=0x000000000078680b
- (id)textInputTraits;	// IMP=0x00000000007867ab
- (void)removeEmojiAlternatives;	// IMP=0x00000000007866de
- (void)addTextAlternatives:(id)arg1;	// IMP=0x0000000000786641
@property(readonly, nonatomic) _Bool hasText;
- (void)insertText:(id)arg1 alternatives:(id)arg2 style:(long long)arg3;	// IMP=0x00000000007863a6
- (void)insertText:(id)arg1;	// IMP=0x0000000000786243
- (_Bool)_shouldSimulateKeyboardInputOnTextInsertion;	// IMP=0x000000000078623b
- (void)deleteBackward;	// IMP=0x00000000007861a5
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x000000000078619d
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x0000000000786195
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x000000000078618d
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x000000000078616f
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x00000000007860da
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000007860d2
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000007860ca
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x00000000007860c2
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000007860b2
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000007860aa
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x00000000007860a2
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x000000000078609a
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x0000000000786092
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
- (void)unmarkText;	// IMP=0x0000000000786046
- (void)_setMarkedText:(id)arg1 highlights:(const void *)arg2 selectedRange:(struct _NSRange)arg3;	// IMP=0x0000000000785f34
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0000000000785eea
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0000000000785bc4
@property(copy, nonatomic) NSDictionary *markedTextStyle;
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (id)markedText;	// IMP=0x0000000000785a08
- (_Bool)hasMarkedText;	// IMP=0x00000000007859e4
@property(copy) UITextRange *selectedTextRange;
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x0000000000785993
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x000000000078595d
- (struct FloatRect)_scaledCaretRectForSelectionEnd:(struct FloatRect)arg1;	// IMP=0x0000000000785614
- (struct FloatRect)_scaledCaretRectForSelectionStart:(struct FloatRect)arg1;	// IMP=0x00000000007855b5
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x00000000007855af
- (id)textInRange:(id)arg1;	// IMP=0x0000000000785547
- (void)insertTextSuggestion:(id)arg1;	// IMP=0x00000000007852fd
- (void)_didChangeWebViewEditability;	// IMP=0x000000000078523e
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;	// IMP=0x0000000000785171
- (void)endSelectionChange;	// IMP=0x000000000078512e
- (void)beginSelectionChange;	// IMP=0x00000000007850e8
- (_Bool)_allowAnimatedUpdateSelectionRectViews;	// IMP=0x00000000007850e0
- (void)_updateAccessory;	// IMP=0x0000000000784ff0
- (void)accessoryOpen;	// IMP=0x0000000000784f92
@property(readonly, nonatomic) UIWebFormAccessory *formAccessoryView;
- (void)accessoryAutoFill;	// IMP=0x0000000000784e87
- (void)accessoryTab:(_Bool)arg1;	// IMP=0x0000000000784da3
- (void)updateFocusedElementFocusedWithDataListDropdown:(_Bool)arg1;	// IMP=0x0000000000784d83
- (void)updateFocusedElementSelectedIndex:(unsigned int)arg1 allowsMultipleSelection:(_Bool)arg2;	// IMP=0x0000000000784d2b
- (void)updateFocusedElementValueAsColor:(id)arg1;	// IMP=0x0000000000784ba8
- (void)updateFocusedElementValue:(id)arg1;	// IMP=0x0000000000784a88
- (void)accessoryDone;	// IMP=0x0000000000784a20
- (void)accessoryClear;	// IMP=0x000000000078497a
- (void)_setDoubleTapGesturesEnabled:(_Bool)arg1;	// IMP=0x0000000000784836
- (struct Color)_tapHighlightColorForFastClick:(_Bool)arg1;	// IMP=0x000000000078480c
- (void)_becomeFirstResponderWithSelectionMovingForward:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000784701
- (void)_previousAccessoryTabForWebView:(id)arg1;	// IMP=0x00000000007846ed
- (void)_nextAccessoryTabForWebView:(id)arg1;	// IMP=0x00000000007846d6
- (void)_didCommitLoadForMainFrame;	// IMP=0x000000000078461c
- (void)_didStartProvisionalLoadForMainFrame;	// IMP=0x00000000007845c4
- (void)runModalJavaScriptDialog:(void *)arg1;	// IMP=0x0000000000784559
- (void)unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded;	// IMP=0x0000000000784501
- (void)updateSoftwareKeyboardSuppressionStateFromWebView;	// IMP=0x0000000000784457
- (void)_handleAutocorrectionContext:(const void *)arg1;	// IMP=0x00000000007843a7
- (void)requestAutocorrectionContextWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000007840e3
- (void)_cancelPendingAutocorrectionContextHandler;	// IMP=0x00000000007840ab
- (void)_invokePendingAutocorrectionContextHandler:(id)arg1;	// IMP=0x0000000000784064
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000783ee1
- (void)requestDictationContext:(CDUnknownBlockType)arg1;	// IMP=0x0000000000783e3f
- (void)replaceDictatedText:(id)arg1 withText:(id)arg2;	// IMP=0x0000000000783d1d
- (void)didInsertFinalDictationResult;	// IMP=0x0000000000783ceb
- (void)willInsertFinalDictationResult;	// IMP=0x0000000000783cb9
- (struct CGRect)textLastRect;	// IMP=0x0000000000783c28
- (struct CGRect)textFirstRect;	// IMP=0x0000000000783ba5
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0000000000783b8a
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0000000000783b20
- (void)updateSelectionWithExtentPoint:(struct CGPoint)arg1 withBoundary:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000007839c3
- (void)updateSelectionWithExtentPoint:(struct CGPoint)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000783887
- (void)beginSelectionInDirection:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000007837aa
- (void)selectTextWithGranularity:(long long)arg1 atPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000078365b
- (void)moveSelectionAtBoundary:(long long)arg1 inDirection:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000783541
- (void)selectPositionAtBoundary:(long long)arg1 inDirection:(long long)arg2 fromPoint:(struct CGPoint)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000007833e4
- (void)_selectPositionAtPoint:(struct CGPoint)arg1 stayingWithinFocusedElement:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000007832e1
- (void)selectPositionAtPoint:(struct CGPoint)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000078327f
- (void)_requestEvasionRectsAboveSelectionIfNeeded:(void *)arg1;	// IMP=0x0000000000782e8f
- (void)requestRectsToEvadeForSelectionCommandsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000782ded
- (void)requestAutocorrectionRectsForString:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000782c4a
@property(readonly, nonatomic) const void *autocorrectionData;
- (void)moveByOffset:(long long)arg1;	// IMP=0x0000000000782b68
- (void)changeSelectionWithTouchesFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2 withGesture:(long long)arg3 withState:(long long)arg4;	// IMP=0x0000000000782a3a
- (void)changeSelectionWithTouchAt:(struct CGPoint)arg1 withSelectionTouch:(long long)arg2 baseIsStart:(_Bool)arg3 withFlags:(long long)arg4;	// IMP=0x0000000000782942
- (void)changeSelectionWithGestureAt:(struct CGPoint)arg1 withGesture:(long long)arg2 withState:(long long)arg3 withFlags:(long long)arg4;	// IMP=0x000000000078280e
- (void)changeSelectionWithGestureAt:(struct CGPoint)arg1 withGesture:(long long)arg2 withState:(long long)arg3;	// IMP=0x00000000007827f6
- (_Bool)_hasFocusedElement;	// IMP=0x00000000007827de
- (void)_didPerformAction:(SEL)arg1 sender:(id)arg2;	// IMP=0x00000000007827bf
- (void)_willPerformAction:(SEL)arg1 sender:(id)arg2;	// IMP=0x00000000007827a0
- (_Bool)_handleDOMPasteRequestWithResult:(unsigned char)arg1;	// IMP=0x0000000000782679
- (void)_accessibilityClearSelection;	// IMP=0x0000000000782647
- (void)_accessibilityStoreSelection;	// IMP=0x0000000000782615
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000007824bf
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2;	// IMP=0x00000000007824aa
- (void)_accessibilityRetrieveRectsEnclosingSelectionOffset:(long long)arg1 withGranularity:(long long)arg2;	// IMP=0x00000000007823d7
- (void)accessibilityRetrieveSpeakSelectionContent;	// IMP=0x00000000007822ac
- (void)_defineForWebView:(id)arg1;	// IMP=0x000000000078229a
- (void)_showDictionary:(id)arg1;	// IMP=0x0000000000782218
- (void)_showTextStyleOptionsForWebView:(id)arg1;	// IMP=0x00000000007821f0
- (void)toggleUnderlineForWebView:(id)arg1;	// IMP=0x0000000000782183
- (void)toggleItalicsForWebView:(id)arg1;	// IMP=0x0000000000782116
- (void)toggleBoldfaceForWebView:(id)arg1;	// IMP=0x00000000007820a9
- (_Bool)shouldSynthesizeKeyEvents;	// IMP=0x000000000078207b
- (void)selectAllForWebView:(id)arg1;	// IMP=0x0000000000781fda
- (void)selectForWebView:(id)arg1;	// IMP=0x0000000000781efe
- (void)_pasteAsQuotationForWebView:(id)arg1;	// IMP=0x0000000000781e5d
- (void)pasteForWebView:(id)arg1;	// IMP=0x0000000000781d7f
- (void)cutForWebView:(id)arg1;	// IMP=0x0000000000781d66
- (void)copyForWebView:(id)arg1;	// IMP=0x0000000000781cd0
- (void)_keyboardDidRequestDismissal:(id)arg1;	// IMP=0x0000000000781ca4
- (void)_didHideMenu:(id)arg1;	// IMP=0x0000000000781c7c
- (void)_willHideMenu:(id)arg1;	// IMP=0x0000000000781c68
- (id)targetForActionForWebView:(SEL)arg1 withSender:(id)arg2;	// IMP=0x0000000000781c39
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x0000000000781c06
- (_Bool)canPerformActionForWebView:(SEL)arg1 withSender:(id)arg2;	// IMP=0x000000000078118d
- (_Bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x0000000000780f57
- (void)tintColorDidChange;	// IMP=0x0000000000780e97
- (void)_updateInteractionTintColor:(id)arg1;	// IMP=0x0000000000780e66
- (id)_cascadeInteractionTintColor;	// IMP=0x0000000000780c88
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *insertionPointColor;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x0000000000780aa0
- (void)toggleStrikeThroughForWebView:(id)arg1;	// IMP=0x0000000000780a8e
- (void)_setTextColorForWebView:(id)arg1 sender:(id)arg2;	// IMP=0x000000000078092c
- (void)_setFontSizeForWebView:(double)arg1 sender:(id)arg2;	// IMP=0x00000000007808a5
- (void)_setFontForWebView:(id)arg1 sender:(id)arg2;	// IMP=0x00000000007806b3
- (void)decreaseSizeForWebView:(id)arg1;	// IMP=0x00000000007805dd
- (void)increaseSizeForWebView:(id)arg1;	// IMP=0x0000000000780507
- (void)_toggleStrikeThroughForWebView:(id)arg1;	// IMP=0x0000000000780471
- (void)_changeListTypeForWebView:(id)arg1;	// IMP=0x000000000078045c
- (void)_decreaseListLevelForWebView:(id)arg1;	// IMP=0x0000000000780447
- (void)_increaseListLevelForWebView:(id)arg1;	// IMP=0x0000000000780432
- (void)pasteAndMatchStyleForWebView:(id)arg1;	// IMP=0x0000000000780420
- (void)_pasteAndMatchStyleForWebView:(id)arg1;	// IMP=0x000000000078038a
- (void)alignJustifiedForWebView:(id)arg1;	// IMP=0x0000000000780378
- (void)_alignJustifiedForWebView:(id)arg1;	// IMP=0x00000000007802e2
- (void)alignCenterForWebView:(id)arg1;	// IMP=0x00000000007802d0
- (void)_alignCenterForWebView:(id)arg1;	// IMP=0x000000000078023a
- (void)alignRightForWebView:(id)arg1;	// IMP=0x0000000000780228
- (void)_alignRightForWebView:(id)arg1;	// IMP=0x0000000000780192
- (void)alignLeftForWebView:(id)arg1;	// IMP=0x0000000000780180
- (void)_alignLeftForWebView:(id)arg1;	// IMP=0x00000000007800ea
- (void)outdentForWebView:(id)arg1;	// IMP=0x00000000007800d8
- (void)_outdentForWebView:(id)arg1;	// IMP=0x0000000000780042
- (void)indentForWebView:(id)arg1;	// IMP=0x0000000000780030
- (void)_indentForWebView:(id)arg1;	// IMP=0x000000000077ff9a
- (void)insertNestedUnorderedListForWebView:(id)arg1;	// IMP=0x000000000077ff88
- (void)_insertNestedUnorderedListForWebView:(id)arg1;	// IMP=0x000000000077fef2
- (void)insertNestedOrderedListForWebView:(id)arg1;	// IMP=0x000000000077fee0
- (void)_insertNestedOrderedListForWebView:(id)arg1;	// IMP=0x000000000077fe4a
- (void)insertUnorderedListForWebView:(id)arg1;	// IMP=0x000000000077fe38
- (void)_insertUnorderedListForWebView:(id)arg1;	// IMP=0x000000000077fda2
- (void)insertOrderedListForWebView:(id)arg1;	// IMP=0x000000000077fd90
- (void)_insertOrderedListForWebView:(id)arg1;	// IMP=0x000000000077fcfa
- (void)replaceForWebView:(id)arg1;	// IMP=0x000000000077fcc2
- (void)_transliterateChineseForWebView:(id)arg1;	// IMP=0x000000000077fc73
- (void)_promptForReplaceForWebView:(id)arg1;	// IMP=0x000000000077fc1d
- (void)selectWordBackward;	// IMP=0x000000000077fbe0
- (void)replaceText:(id)arg1 withText:(id)arg2;	// IMP=0x000000000077fadc
- (_Bool)isReplaceAllowed;	// IMP=0x000000000077fac5
- (void)makeTextWritingDirectionRightToLeftForWebView:(id)arg1;	// IMP=0x000000000077faab
- (void)makeTextWritingDirectionLeftToRightForWebView:(id)arg1;	// IMP=0x000000000077fa91
- (void)makeTextWritingDirectionNaturalForWebView:(id)arg1;	// IMP=0x000000000077fa7a
- (id)alternativesForSelectedText;	// IMP=0x000000000077f995
- (id)selectedText;	// IMP=0x000000000077f96b
- (void)_addShortcutForWebView:(id)arg1;	// IMP=0x000000000077f8d8
- (void)_translateForWebView:(id)arg1;	// IMP=0x000000000077f804
- (void)_shareForWebView:(id)arg1;	// IMP=0x000000000077f73e
- (void)_lookupForWebView:(id)arg1;	// IMP=0x000000000077f6aa
- (void)_pasteAndMatchStyle:(id)arg1;	// IMP=0x000000000077f643
- (void)_pasteAsQuotation:(id)arg1;	// IMP=0x000000000077f5dc
- (void)_changeListType:(id)arg1;	// IMP=0x000000000077f575
- (void)_decreaseListLevel:(id)arg1;	// IMP=0x000000000077f50e
- (void)_increaseListLevel:(id)arg1;	// IMP=0x000000000077f4a7
- (void)_insertNestedUnorderedList:(id)arg1;	// IMP=0x000000000077f440
- (void)_insertNestedOrderedList:(id)arg1;	// IMP=0x000000000077f3d9
- (void)_insertUnorderedList:(id)arg1;	// IMP=0x000000000077f372
- (void)_insertOrderedList:(id)arg1;	// IMP=0x000000000077f30b
- (void)_toggleStrikeThrough:(id)arg1;	// IMP=0x000000000077f2a4
- (void)_outdent:(id)arg1;	// IMP=0x000000000077f23d
- (void)_indent:(id)arg1;	// IMP=0x000000000077f1d6
- (void)_alignRight:(id)arg1;	// IMP=0x000000000077f16f
- (void)_alignLeft:(id)arg1;	// IMP=0x000000000077f108
- (void)_alignJustified:(id)arg1;	// IMP=0x000000000077f0a1
- (void)_alignCenter:(id)arg1;	// IMP=0x000000000077f03a
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;	// IMP=0x000000000077efd3
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;	// IMP=0x000000000077ef6c
- (void)makeTextWritingDirectionNatural:(id)arg1;	// IMP=0x000000000077ef05
- (void)pasteAndMatchStyle:(id)arg1;	// IMP=0x000000000077ee9e
- (void)decreaseSize:(id)arg1;	// IMP=0x000000000077ee37
- (void)increaseSize:(id)arg1;	// IMP=0x000000000077edd0
- (void)toggleUnderline:(id)arg1;	// IMP=0x000000000077ed69
- (void)toggleItalics:(id)arg1;	// IMP=0x000000000077ed02
- (void)toggleBoldface:(id)arg1;	// IMP=0x000000000077ec9b
- (void)selectAll:(id)arg1;	// IMP=0x000000000077ec34
- (void)select:(id)arg1;	// IMP=0x000000000077ebcd
- (void)replace:(id)arg1;	// IMP=0x000000000077eb66
- (void)paste:(id)arg1;	// IMP=0x000000000077eaff
- (void)cut:(id)arg1;	// IMP=0x000000000077ea98
- (void)copy:(id)arg1;	// IMP=0x000000000077ea31
- (void)_previousAccessoryTab:(id)arg1;	// IMP=0x000000000077e9ca
- (void)_nextAccessoryTab:(id)arg1;	// IMP=0x000000000077e963
- (void)_transliterateChinese:(id)arg1;	// IMP=0x000000000077e8fc
- (void)_showTextStyleOptions:(id)arg1;	// IMP=0x000000000077e895
- (void)_share:(id)arg1;	// IMP=0x000000000077e82e
- (void)_promptForReplace:(id)arg1;	// IMP=0x000000000077e7c7
- (void)_translate:(id)arg1;	// IMP=0x000000000077e760
- (void)_lookup:(id)arg1;	// IMP=0x000000000077e6f9
- (void)_define:(id)arg1;	// IMP=0x000000000077e692
- (void)_addShortcut:(id)arg1;	// IMP=0x000000000077e62b
- (id)supportedPasteboardTypesForCurrentSelection;	// IMP=0x000000000077e4ef
@property(readonly, nonatomic) UIView *inputAccessoryViewForWebView;
- (id)inputAccessoryView;	// IMP=0x000000000077e478
@property(readonly, nonatomic) UITextInputAssistantItem *inputAssistantItemForWebView;
- (id)inputAssistantItem;	// IMP=0x000000000077e428
- (_Bool)requiresAccessoryView;	// IMP=0x000000000077e3bc
- (_Bool)_elementTypeRequiresAccessoryView:(int)arg1;	// IMP=0x000000000077e375
- (void)_didEndScrollingOrZooming;	// IMP=0x000000000077e30e
- (void)scrollViewWillStartPanOrPinchGesture;	// IMP=0x000000000077e2b4
- (void)_willStartScrollingOrZooming;	// IMP=0x000000000077e27a
- (void)_positionInformationDidChange:(const void *)arg1;	// IMP=0x000000000077df4c
- (void)_invalidateCurrentPositionInformation;	// IMP=0x000000000077ddb8
- (void)clearSelection;	// IMP=0x000000000077dd8c
- (void)pasteWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000077dc2e
- (void)setUpTextSelectionAssistant;	// IMP=0x000000000077dbc9
- (void)_attemptSyntheticClickAtLocation:(struct CGPoint)arg1 modifierFlags:(long long)arg2;	// IMP=0x000000000077db1e
- (void)_twoFingerDoubleTapRecognized:(id)arg1;	// IMP=0x000000000077daa0
- (void)_nonBlockingDoubleTapRecognized:(id)arg1;	// IMP=0x000000000077da60
- (void)_resetIsDoubleTapPending;	// IMP=0x000000000077da4f
- (void)_doubleTapRecognized:(id)arg1;	// IMP=0x000000000077d926
- (void)_singleTapRecognized:(id)arg1;	// IMP=0x000000000077d704
- (void)_didCompleteSyntheticClick;	// IMP=0x000000000077d610
- (void)_didNotHandleTapAsClick:(const struct IntPoint *)arg1;	// IMP=0x000000000077d57a
- (void)_commitPotentialTapFailed;	// IMP=0x000000000077d4f1
- (void)_doubleTapDidFail:(id)arg1;	// IMP=0x000000000077d45b
- (void)_singleTapDidReset:(id)arg1;	// IMP=0x000000000077d3a5
- (void)_singleTapIdentified:(id)arg1;	// IMP=0x000000000077d1f0
- (void)_endPotentialTapAndEnableDoubleTapGesturesIfNecessary;	// IMP=0x000000000077d0b9
- (void)_longPressRecognized:(id)arg1;	// IMP=0x000000000077cfce
- (void)_twoFingerSingleTapGestureRecognized:(id)arg1;	// IMP=0x000000000077ce78
- (void)_doubleTapRecognizedForDoubleClick:(id)arg1;	// IMP=0x000000000077cdb3
- (void)_highlightLongPressRecognized:(id)arg1;	// IMP=0x000000000077cba9
- (ObjectIdentifier_e7ec9792)nextTapIdentifier;	// IMP=0x000000000077cb89
- (id)webSelectionRects;	// IMP=0x000000000077cb4f
- (id)webSelectionRectsForSelectionGeometries:(const void *)arg1;	// IMP=0x000000000077c94f
- (_Bool)textInteractionGesture:(long long)arg1 shouldBeginAtPoint:(struct CGPoint)arg2;	// IMP=0x000000000077c689
- (_Bool)pointIsNearMarkedText:(struct CGPoint)arg1;	// IMP=0x000000000077c521
- (_Bool)hasSelectablePositionAtPoint:(struct CGPoint)arg1;	// IMP=0x000000000077c3a7
- (_Bool)canShowNonEmptySelectionView;	// IMP=0x000000000077c376
- (void)_fadeTapHighlightViewIfNeeded;	// IMP=0x000000000077c22b
- (void)_finishInteraction;	// IMP=0x000000000077c20e
- (void)_cancelInteraction;	// IMP=0x000000000077c1e6
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x000000000077bb4b
- (_Bool)_shouldToggleSelectionCommandsAfterTapAt:(struct CGPoint)arg1;	// IMP=0x000000000077ba9f
- (_Bool)_pointIsInsideSelectionRect:(struct CGPoint)arg1 outBoundingRect:(struct FloatRect *)arg2;	// IMP=0x000000000077b959
- (id)_uiTextSelectionRects;	// IMP=0x000000000077b765
- (void)_invokeAndRemovePendingHandlersValidForCurrentPositionInformation;	// IMP=0x000000000077b4e4
- (_Bool)_currentPositionInformationIsApproximatelyValidForRequest:(const struct InteractionInformationRequest *)arg1 radiusForApproximation:(int)arg2;	// IMP=0x000000000077b4bd
- (_Bool)_hasValidOutstandingPositionInformationRequest:(const struct InteractionInformationRequest *)arg1;	// IMP=0x000000000077b499
- (_Bool)_currentPositionInformationIsValidForRequest:(const struct InteractionInformationRequest *)arg1;	// IMP=0x000000000077b472
- (void)requestAsynchronousPositionInformationUpdate:(struct InteractionInformationRequest)arg1;	// IMP=0x000000000077b3ea
- (_Bool)ensurePositionInformationIsUpToDate:(struct InteractionInformationRequest)arg1;	// IMP=0x000000000077b24a
- (void)doAfterPositionInformationUpdate:(CDUnknownBlockType)arg1 forRequest:(struct InteractionInformationRequest)arg2;	// IMP=0x000000000077b02e
- (SEL)_actionForLongPress;	// IMP=0x000000000077b012
- (SEL)_actionForLongPressFromPositionInformation:(const void *)arg1;	// IMP=0x000000000077af9a
- (void)_showDataDetectorsUIForPositionInformation:(const void *)arg1;	// IMP=0x000000000077af7d
- (void)_showDataDetectorsUI;	// IMP=0x000000000077af61
- (void)_showLinkSheet;	// IMP=0x000000000077af44
- (void)_showAttachmentSheet;	// IMP=0x000000000077adac
- (void)_showImageSheet;	// IMP=0x000000000077ad8f
- (_Bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;	// IMP=0x000000000077ad49
- (_Bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;	// IMP=0x000000000077acde
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;	// IMP=0x000000000077a896
- (_Bool)_shouldAdditionallyRecognizeGestureRecognizer:(id)arg1 simultaneouslyWithGestureRecognizer:(id)arg2;	// IMP=0x000000000077a88e
- (_Bool)gestureRecognizer:(id)arg1 canBePreventedByGestureRecognizer:(id)arg2;	// IMP=0x000000000077a833
- (_Bool)gestureRecognizer:(id)arg1 canPreventGestureRecognizer:(id)arg2;	// IMP=0x000000000077a7b2
- (struct CGRect)_selectionClipRect;	// IMP=0x000000000077a741
@property(readonly, nonatomic) UIView *inputViewForWebView;
- (id)inputView;	// IMP=0x000000000077a67e
- (void)resetShouldZoomToFocusRectAfterShowingKeyboard;	// IMP=0x000000000077a64d
- (void)_zoomToRevealFocusedElement;	// IMP=0x000000000077a4b5
- (void)_zoomToFocusRectAfterShowingKeyboardIfNeeded;	// IMP=0x000000000077a469
- (void)_keyboardDidShow;	// IMP=0x000000000077a457
- (void)_keyboardWillShow;	// IMP=0x000000000077a446
- (struct FloatRect)rectToRevealWhenZoomingToFocusedElement;	// IMP=0x000000000077a36e
- (_Bool)_requiresKeyboardResetOnReload;	// IMP=0x000000000077a366
- (_Bool)_requiresKeyboardWhenFirstResponder;	// IMP=0x000000000077a2f5
- (_Bool)_disableAutomaticKeyboardUI;	// IMP=0x000000000077a2be
- (_Bool)_shouldShowAutomaticKeyboardUIIgnoringInputMode;	// IMP=0x000000000077a259
- (_Bool)shouldShowAutomaticKeyboardUI;	// IMP=0x000000000077a1fe
- (void)_scrollingNodeScrollingDidEnd:(unsigned long long)arg1;	// IMP=0x000000000077a14f
- (void)_scrollingNodeScrollingWillBegin:(unsigned long long)arg1;	// IMP=0x000000000077a132
- (void)_didScroll;	// IMP=0x000000000077a0f7
- (void)_cancelTouchEventGestureRecognizer;	// IMP=0x000000000077a0f1
- (void)_cancelLongPressGestureRecognizer;	// IMP=0x000000000077a0d4
- (void)_handleSmartMagnificationInformationForPotentialTap:(ObjectIdentifier_e7ec9792)arg1 renderRect:(const struct FloatRect *)arg2 fitEntireRect:(_Bool)arg3 viewportMinimumScale:(double)arg4 viewportMaximumScale:(double)arg5 nodeIsRootLevel:(_Bool)arg6;	// IMP=0x0000000000779cfe
- (void)_disableDoubleTapGesturesDuringTapIfNecessary:(ObjectIdentifier_e7ec9792)arg1;	// IMP=0x0000000000779cdb
- (_Bool)_mayDisableDoubleTapGesturesDuringSingleTap;	// IMP=0x0000000000779ccb
- (void)_didGetTapHighlightForRequest:(ObjectIdentifier_e7ec9792)arg1 color:(const struct Color *)arg2 quads:(const void *)arg3 topLeftRadius:(const struct IntSize *)arg4 topRightRadius:(const struct IntSize *)arg5 bottomLeftRadius:(const struct IntSize *)arg6 bottomRightRadius:(const struct IntSize *)arg7 nodeHasBuiltInClickHandling:(_Bool)arg8;	// IMP=0x0000000000779a93
- (void)_showTapHighlight;	// IMP=0x00000000007798ab
@property(readonly, nonatomic) UIGestureRecognizer *imageAnalysisGestureRecognizer;
@property(readonly, nonatomic) struct CGRect tapHighlightViewRect;
- (void)_updateTapHighlight;	// IMP=0x000000000077916d
- (_Bool)_isTouchEndDeferringGesture:(id)arg1;	// IMP=0x000000000077913d
- (_Bool)_isTouchStartDeferringGesture:(id)arg1;	// IMP=0x000000000077910d
- (void)_doneDeferringTouchEnd:(_Bool)arg1;	// IMP=0x0000000000778fe4
- (void)_doneDeferringTouchStart:(_Bool)arg1;	// IMP=0x0000000000778e01
- (id)_touchEndDeferringGestures;	// IMP=0x0000000000778d6b
- (id)_touchStartDeferringGestures;	// IMP=0x0000000000778cd5
@property(readonly, nonatomic) NSArray *deferringGestures;
@property(readonly, nonatomic) void *gestureRecognizerConsistencyEnforcer;
@property(readonly, nonatomic) UIWebTouchEventsGestureRecognizer *touchEventGestureRecognizer;
- (void)_webTouchEvent:(const void *)arg1 preventsNativeGestures:(_Bool)arg2;	// IMP=0x0000000000778b8e
- (void)_inspectorNodeSearchRecognized:(id)arg1;	// IMP=0x0000000000778ac3
- (void)_resetPanningPreventionFlags;	// IMP=0x0000000000778aa7
- (id)touchActionActiveTouches;	// IMP=0x0000000000778a8a
- (_Bool)gestureRecognizerMayDoubleTapToZoomWebView:(id)arg1;	// IMP=0x0000000000778a65
- (_Bool)gestureRecognizerMayPinchToZoomWebView:(id)arg1;	// IMP=0x0000000000778980
- (_Bool)gestureRecognizerMayPanWebView:(id)arg1;	// IMP=0x00000000007788eb
- (_Bool)gestureRecognizer:(id)arg1 shouldReceivePress:(id)arg2;	// IMP=0x00000000007788e3
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;	// IMP=0x00000000007787bd
- (void)_handleTouchActionsForTouchEvent:(const void *)arg1;	// IMP=0x000000000077864f
- (void)_webTouchEventsRecognized:(id)arg1;	// IMP=0x0000000000777ff3
- (_Bool)_touchEventsMustRequireGestureRecognizerToFail:(id)arg1;	// IMP=0x0000000000777f5c
- (optional_53a37146)activeTouchIdentifierForGestureRecognizer:(id)arg1;	// IMP=0x0000000000777da2
- (void)cancelPointersForGestureRecognizer:(id)arg1;	// IMP=0x0000000000777a9b
- (_Bool)resignFirstResponderForWebView;	// IMP=0x00000000007778b3
- (void)endEditingAndUpdateFocusAppearanceWithReason:(long long)arg1;	// IMP=0x0000000000777795
- (_Bool)resignFirstResponder;	// IMP=0x0000000000777774
- (_Bool)becomeFirstResponderForWebView;	// IMP=0x000000000077758c
- (_Bool)becomeFirstResponder;	// IMP=0x000000000077756b
- (_Bool)canBecomeFirstResponderForWebView;	// IMP=0x0000000000777557
- (_Bool)canBecomeFirstResponder;	// IMP=0x0000000000777547
- (void)_resetInputViewDeferral;	// IMP=0x000000000077751a
- (void)_scheduleResetInputViewDeferralAfterBecomingFirstResponder;	// IMP=0x00000000007774da
- (void)_cancelPreviousResetInputViewDeferralRequest;	// IMP=0x00000000007774b4
- (void)_endEditing;	// IMP=0x0000000000777456
- (_Bool)setIsEditable:(_Bool)arg1;	// IMP=0x000000000077743a
@property(readonly, nonatomic) _Bool isEditable;
@property(readonly, nonatomic) _Bool shouldHideSelectionWhenScrolling;
@property(readonly, nonatomic) struct CGPoint lastInteractionLocation;
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) const void *positionInformation;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x00000000007771a0
- (void)_disableInspectorNodeSearch;	// IMP=0x0000000000777138
- (void)_enableInspectorNodeSearch;	// IMP=0x00000000007770ae
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000000776f77
- (void)scrollSelectionToVisible:(_Bool)arg1;	// IMP=0x0000000000776f71
- (void)cancelAutoscroll;	// IMP=0x0000000000776f3f
- (void)startAutoscroll:(struct CGPoint)arg1;	// IMP=0x0000000000776eee
- (struct CGRect)unobscuredContentRect;	// IMP=0x0000000000776ec3
- (id)_scroller;	// IMP=0x0000000000776ea2
- (double)inverseScale;	// IMP=0x0000000000776e4b
- (id)unscaledView;	// IMP=0x0000000000776e3a
- (void)_updateLongPressAndHighlightLongPressGestures;	// IMP=0x0000000000776d76
- (void)_didChangeLinkPreviewAvailability;	// IMP=0x0000000000776d64
- (void)_addDefaultGestureRecognizers;	// IMP=0x0000000000776b20
- (void)_removeDefaultGestureRecognizers;	// IMP=0x00000000007768dc
- (void)_cancelPendingKeyEventHandler;	// IMP=0x0000000000776813
- (void)cleanUpInteractionPreviewContainers;	// IMP=0x0000000000776801
- (void)cleanUpInteraction;	// IMP=0x0000000000775ee9
- (void)setUpInteraction;	// IMP=0x00000000007751f5
- (void)_createAndConfigureLongPressGestureRecognizer;	// IMP=0x0000000000775148
- (void)_createAndConfigureHighlightLongPressGestureRecognizer;	// IMP=0x00000000007750ae
- (void)_createAndConfigureDoubleTapGestureRecognizer;	// IMP=0x0000000000774fa7
- (id)_formInputSession;	// IMP=0x0000000000774f96
@property(readonly, nonatomic) _Bool preventsPanningInYAxis;
@property(readonly, nonatomic) _Bool preventsPanningInXAxis;
@property(readonly, nonatomic) UIWKTextInteractionAssistant *textInteractionAssistant;
@property(readonly, nonatomic) _Bool isShowingDataListSuggestions;
- (void)_setDataListSuggestionsControl:(id)arg1;	// IMP=0x000000000078da63
- (void)_selectDataListOption:(long long)arg1;	// IMP=0x000000000078da35
- (void)_simulateSelectionStart;	// IMP=0x000000000078da16
- (void)_dismissContactPickerWithContacts:(id)arg1;	// IMP=0x000000000078da10
- (id)_contentsOfUserInterfaceItem:(id)arg1;	// IMP=0x000000000078d8dc
- (double)timePickerValueMinute;	// IMP=0x000000000078d87b
- (double)timePickerValueHour;	// IMP=0x000000000078d81a
- (void)setTimePickerValueToHour:(long long)arg1 minute:(long long)arg2;	// IMP=0x000000000078d7a9
@property(readonly, nonatomic) NSString *formInputLabel;
@property(readonly, nonatomic) NSString *selectFormPopoverTitle;
@property(readonly, nonatomic) NSString *textContentTypeForTesting;
- (void)setSelectedColorForColorPicker:(id)arg1;	// IMP=0x000000000078d6bf
- (_Bool)selectFormAccessoryHasCheckedItemAtRow:(long long)arg1;	// IMP=0x000000000078d661
- (void)selectFormAccessoryPickerRow:(long long)arg1;	// IMP=0x000000000078d600
- (void)_simulateLongPressActionAtLocation:(struct CGPoint)arg1;	// IMP=0x000000000078d3e1
- (void)_simulateElementAction:(long long)arg1 atLocation:(struct CGPoint)arg2;	// IMP=0x000000000078d1c3
- (void)_simulateTextEntered:(id)arg1;	// IMP=0x000000000078d1b1
@property(readonly, nonatomic) WKFormSelectControl *selectControl;
@property(readonly, nonatomic) WKDateTimeInputControl *dateTimeInputControl;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(CDUnknownBlockType)arg1;	// IMP=0x000000000078d11a

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) long long _textInputSource;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool forceSpellingDictation;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) _Bool isSingleLineDocument;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) long long keyboardType;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic) long long returnKeyType;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(nonatomic) long long selectionAffinity;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
@property(readonly, nonatomic) UIView *textInputView;
@property(nonatomic) int textLoupeVisibility;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(nonatomic) id textSuggestionDelegate;
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;

@end

